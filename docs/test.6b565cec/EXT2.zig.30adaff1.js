var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"    3","line":"const lib = @import(\"../lib.zig\");"},
{"lineNum":"    4","line":"const Reader = lib.Reader;"},
{"lineNum":"    5","line":"const assert = std.debug.assert;"},
{"lineNum":"    6","line":"const log = std.log.scoped(.ext2);"},
{"lineNum":"    7","line":"const set_fields_alignment_in_struct = lib.set_fields_alignment_in_struct;"},
{"lineNum":"    8","line":"const set_fields_alignment = lib.set_fields_alignment;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"const EXT2 = @This();"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"const SuperblockOffset = 0x400;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"/// 1024 bytes in size, in revision 0 at beginning of every block group."},
{"lineNum":"   15","line":"/// From revision 1 of EXT2 they can be placed sparsely every other block."},
{"lineNum":"   16","line":"const Superblock = extern struct {"},
{"lineNum":"   17","line":"    /// Value indicating the total number of inodes, both used and free, in the file system."},
{"lineNum":"   18","line":"    /// This value must be lower or equal to (s_inodes_per_group * number of block groups). It"},
{"lineNum":"   19","line":"    /// must be equal to the sum of the inodes defined in each block group."},
{"lineNum":"   20","line":"    inodes_count: u32 align(1),"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    /// Value indicating the total number of blocks in the system including all used, free and"},
{"lineNum":"   23","line":"    /// reserved. This value must be lower or equal to (s_blocks_per_group * number of block"},
{"lineNum":"   24","line":"    /// groups). It can be lower than the previous calculation if the last block group has a"},
{"lineNum":"   25","line":"    /// smaller number of blocks than s_blocks_per_group du to volume size. It must be equal to"},
{"lineNum":"   26","line":"    /// the sum of the blocks defined in each block group."},
{"lineNum":"   27","line":"    blocks_count: u32 align(1),"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    /// Value indicating the total number of blocks reserved for the usage of the super user."},
{"lineNum":"   30","line":"    /// This is most useful if for some reason a user, maliciously or not, fill the file system"},
{"lineNum":"   31","line":"    /// to capacity; the super user will have this specified amount of free blocks at his"},
{"lineNum":"   32","line":"    /// disposal so he can edit and save configuration files."},
{"lineNum":"   33","line":"    r_blocks_count: u32 align(1),"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    /// Value indicating the total number of free blocks, including the number of reserved"},
{"lineNum":"   36","line":"    /// blocks (see s_r_blocks_count). This is a sum of all free blocks of all the block groups."},
{"lineNum":"   37","line":"    free_blocks_count: u32 align(1),"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    /// Value indicating the total number of free inodes. This is a sum of all free inodes of"},
{"lineNum":"   40","line":"    /// all the block groups."},
{"lineNum":"   41","line":"    free_inodes_count: u32 align(1),"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    /// Value identifying the first data block, in other word the id of the block containing the"},
{"lineNum":"   44","line":"    /// superblock structure."},
{"lineNum":"   45","line":"    ///"},
{"lineNum":"   46","line":"    /// Note that this value is always 0 for file systems with a block size larger than 1KB, and"},
{"lineNum":"   47","line":"    /// always 1 for file systems with a block size of 1KB. The superblock is always starting at"},
{"lineNum":"   48","line":"    /// the 1024th byte of the disk, which normally happens to be the first byte of the 3rd"},
{"lineNum":"   49","line":"    /// sector."},
{"lineNum":"   50","line":"    first_data_block: u32 align(1),"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    /// The block size is computed using this value as the number of bits to shift left the"},
{"lineNum":"   53","line":"    /// value 1024. This value may only be non-negative."},
{"lineNum":"   54","line":"    log_block_size: u32 align(1),"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    /// The fragment size is computed using this value as the number of bits to shift left"},
{"lineNum":"   57","line":"    /// the value 1024. Note that a negative value would shift the bit right rather than left."},
{"lineNum":"   58","line":"    ///"},
{"lineNum":"   59","line":"    /// ```"},
{"lineNum":"   60","line":"    /// if( positive )"},
{"lineNum":"   61","line":"    ///   fragmnet size = 1024 << s_log_frag_size;"},
{"lineNum":"   62","line":"    /// else"},
{"lineNum":"   63","line":"    ///   framgnet size = 1024 >> -s_log_frag_size;"},
{"lineNum":"   64","line":"    /// ```"},
{"lineNum":"   65","line":"    log_frag_size: i32 align(1),"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    /// Value indicating the total number of blocks per group. This value in combination with"},
{"lineNum":"   68","line":"    /// s_first_data_block can be used to determine the block groups boundaries. Due to volume"},
{"lineNum":"   69","line":"    /// size boundaries, the last block group might have a smaller number of blocks than what is"},
{"lineNum":"   70","line":"    /// specified in this field."},
{"lineNum":"   71","line":"    blocks_per_group: u32 align(1),"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    /// Value indicating the total number of fragments per group. It is also used to determine"},
{"lineNum":"   74","line":"    /// the size of the block bitmap of each block group."},
{"lineNum":"   75","line":"    frags_per_group: u32 align(1),"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    /// Value indicating the total number of inodes per group. This is also used to determine"},
{"lineNum":"   78","line":"    /// the size of the inode bitmap of each block group. Note that you cannot have more than"},
{"lineNum":"   79","line":"    /// (block size in bytes * 8) inodes per group as the inode bitmap must fit within a single"},
{"lineNum":"   80","line":"    /// block. This value must be a perfect multiple of the number of inodes that can fit in a"},
{"lineNum":"   81","line":"    /// block ((1024<<s_log_block_size)/s_inode_size)."},
{"lineNum":"   82","line":"    inodes_per_group: u32 align(1),"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    /// Unix time, as defined by POSIX, of the last time the file system was mounted."},
{"lineNum":"   85","line":"    mtime: u32 align(1),"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    /// Unix time, as defined by POSIX, of the last write access to the file system."},
{"lineNum":"   88","line":"    wtime: u32 align(1),"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    /// Value indicating how many times the file system was mounted since the last time it was"},
{"lineNum":"   91","line":"    /// fully verified."},
{"lineNum":"   92","line":"    mnt_count: u16 align(1),"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    /// Value indicating the maximum number of times that the file system may be mounted before"},
{"lineNum":"   95","line":"    /// a full check is performed."},
{"lineNum":"   96","line":"    max_mnt_count: u16 align(1),"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    /// Value identifying the file system as Ext2. The value is currently fixed to"},
{"lineNum":"   99","line":"    /// EXT2_SUPER_MAGIC of value 0xEF53."},
{"lineNum":"  100","line":"    magic: u16 align(1),"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    /// Value indicating the file system state. When the file system is mounted, this state is"},
{"lineNum":"  103","line":"    /// set to EXT2_ERROR_FS. After the file system was cleanly unmounted, this value is set to"},
{"lineNum":"  104","line":"    /// EXT2_VALID_FS."},
{"lineNum":"  105","line":"    ///"},
{"lineNum":"  106","line":"    /// When mounting the file system, if a valid of EXT2_ERROR_FS is encountered it means the"},
{"lineNum":"  107","line":"    /// file system was not cleanly unmounted and most likely contain errors that will need to"},
{"lineNum":"  108","line":"    /// be fixed. Typically under Linux this means running fsck."},
{"lineNum":"  109","line":"    state: enum(u16) {"},
{"lineNum":"  110","line":"        EXT2_VALID_FS = 1,"},
{"lineNum":"  111","line":"        EXT2_ERROR_FS = 2,"},
{"lineNum":"  112","line":"    } align(1),"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    /// Value indicating what the file system driver should do when an error is detected."},
{"lineNum":"  115","line":"    errors: enum(u16) {"},
{"lineNum":"  116","line":"        /// Continue as if nothing happened."},
{"lineNum":"  117","line":"        EXT2_ERRORS_CONTINUE = 1,"},
{"lineNum":"  118","line":"        /// Remount read-only"},
{"lineNum":"  119","line":"        EXT2_ERRORS_RO       = 2,"},
{"lineNum":"  120","line":"        /// Cause a kernel panic"},
{"lineNum":"  121","line":"        EXT2_ERRORS_PANIC    = 3,"},
{"lineNum":"  122","line":"    } align(1),"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    /// Value identifying the minor revision level within its revision level."},
{"lineNum":"  125","line":"    minor_rev_level: u16 align(1),"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    /// Unix time, as defined by POSIX, of the last file system check."},
{"lineNum":"  128","line":"    last_check: u32 align(1),"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    /// Maximum Unix time interval, as defined by POSIX, allowed between file system checks."},
{"lineNum":"  131","line":"    checkinterval: u32 align(1),"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    /// Identifier of the os that created the file system."},
{"lineNum":"  134","line":"    creator_os: enum(u32) {"},
{"lineNum":"  135","line":"        EXT2_OS_LINUX   = 0,"},
{"lineNum":"  136","line":"        EXT2_OS_HURD    = 1,"},
{"lineNum":"  137","line":"        EXT2_OS_MASIX   = 2,"},
{"lineNum":"  138","line":"        EXT2_OS_FREEBSD = 3,"},
{"lineNum":"  139","line":"        EXT2_OS_LITES   = 4,"},
{"lineNum":"  140","line":"    } align(1),"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    /// Revision level value."},
{"lineNum":"  143","line":"    rev_level: enum(u32) {"},
{"lineNum":"  144","line":"        /// Revision 0."},
{"lineNum":"  145","line":"        EXT2_GOOD_OLD_REV = 0,"},
{"lineNum":"  146","line":"        /// Revision 1 with variable inode sizes, extended attributes, etc."},
{"lineNum":"  147","line":"        EXT2_DYNAMIC_REV  = 1,"},
{"lineNum":"  148","line":"    } align(1),"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    /// Value used as the default user id for reserved blocks."},
{"lineNum":"  151","line":"    def_resuid: u16 align(1),"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    /// Value used as the default group id for reserved blocks."},
{"lineNum":"  154","line":"    def_resgid: u16 align(1),"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    // EXT2_DYNAMIC_REV specific"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    /// Value used as index to the first inode useable for standard files. In revision 0, the"},
{"lineNum":"  159","line":"    /// first non-reserved inode is fixed to 11 (EXT2_GOOD_OLD_FIRST_INO). In revision 1 and"},
{"lineNum":"  160","line":"    /// later this value may be set to any value."},
{"lineNum":"  161","line":"    first_ino: u32 align(1),"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    /// Value indicating the size of the inode structure. In revision 0, this value is always"},
{"lineNum":"  164","line":"    /// 128 (EXT2_GOOD_OLD_INODE_SIZE). In revision 1 and later, this value must be a perfect"},
{"lineNum":"  165","line":"    /// power of 2 and must be smaller or equal to the block size (1<<s_log_block_size)."},
{"lineNum":"  166","line":"    inode_size: u16 align(1),"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    /// Value used to indicate the block group number hosting this superblock structure. This"},
{"lineNum":"  169","line":"    /// can be used to rebuild the file system from any superblock backup."},
{"lineNum":"  170","line":"    block_group_nr: u16 align(1),"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    /// Bitmask of compatible features. The file system implementation is free to support them"},
{"lineNum":"  173","line":"    /// or not without risk of damaging the meta-data."},
{"lineNum":"  174","line":"    feature_compat: packed struct(u32) {"},
{"lineNum":"  175","line":"        /// Block pre-allocation for new directories."},
{"lineNum":"  176","line":"        EXT2_FEATURE_COMPAT_DIR_PREALLOC:  bool,"},
{"lineNum":"  177","line":"        EXT2_FEATURE_COMPAT_IMAGIC_INODES: bool,"},
{"lineNum":"  178","line":"        /// An Ext3 journal exists."},
{"lineNum":"  179","line":"        EXT3_FEATURE_COMPAT_HAS_JOURNAL:   bool,"},
{"lineNum":"  180","line":"        /// Extended inode attributes are present."},
{"lineNum":"  181","line":"        EXT2_FEATURE_COMPAT_EXT_ATTR:      bool,"},
{"lineNum":"  182","line":"        /// Non-standard inode size used."},
{"lineNum":"  183","line":"        EXT2_FEATURE_COMPAT_RESIZE_INO:    bool,"},
{"lineNum":"  184","line":"        /// Directory indexing (HTree)."},
{"lineNum":"  185","line":"        EXT2_FEATURE_COMPAT_DIR_INDEX:     bool,"},
{"lineNum":"  186","line":"        __unused:                           u26,"},
{"lineNum":"  187","line":"    } align(1),"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    /// Bitmask of incompatible features. The file system implementation should refuse to mount"},
{"lineNum":"  190","line":"    /// the file system if any of the indicated feature is unsupported."},
{"lineNum":"  191","line":"    ///"},
{"lineNum":"  192","line":"    /// An implementation not supporting these features would be unable to properly use the file"},
{"lineNum":"  193","line":"    /// system. For example, if compression is being used and an executable file would be"},
{"lineNum":"  194","line":"    /// unusable after being read from the disk if the system does not know how to uncompress"},
{"lineNum":"  195","line":"    /// it."},
{"lineNum":"  196","line":"    feature_incompat: packed struct(u32) {"},
{"lineNum":"  197","line":"        /// Disk/File compression is used."},
{"lineNum":"  198","line":"        EXT2_FEATURE_INCOMPAT_COMPRESSION: bool,"},
{"lineNum":"  199","line":"        EXT2_FEATURE_INCOMPAT_FILETYPE:    bool,"},
{"lineNum":"  200","line":"        EXT3_FEATURE_INCOMPAT_RECOVER:     bool,"},
{"lineNum":"  201","line":"        EXT3_FEATURE_INCOMPAT_JOURNAL_DEV: bool,"},
{"lineNum":"  202","line":"        EXT2_FEATURE_INCOMPAT_META_BG:     bool,"},
{"lineNum":"  203","line":"        __unused:                           u27,"},
{"lineNum":"  204","line":"    } align(1),"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    /// Bitmask of “read-only” features. The file system implementation should mount as"},
{"lineNum":"  207","line":"    /// read-only if any of the indicated feature is unsupported."},
{"lineNum":"  208","line":"    feature_ro_compat: packed struct(u32) {"},
{"lineNum":"  209","line":"        /// Sparse Superblock."},
{"lineNum":"  210","line":"        EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER: bool,"},
{"lineNum":"  211","line":"        /// Large file support, 64-bit file size."},
{"lineNum":"  212","line":"        EXT2_FEATURE_RO_COMPAT_LARGE_FILE:   bool,"},
{"lineNum":"  213","line":"        /// Binary tree sorted directory files."},
{"lineNum":"  214","line":"        EXT2_FEATURE_RO_COMPAT_BTREE_DIR:    bool,"},
{"lineNum":"  215","line":"        __unused:                             u29,"},
{"lineNum":"  216","line":"    } align(1),"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    /// Value used as the volume id. This should, as much as possible, be unique for each file"},
{"lineNum":"  219","line":"    /// system formatted."},
{"lineNum":"  220","line":"    uuid: [16]u8 align(1),"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    /// Volume name, mostly unusued. A valid volume name would consist of only ISO-Latin-1"},
{"lineNum":"  223","line":"    /// characters and be 0 terminated."},
{"lineNum":"  224","line":"    volume_name: [16]u8 align(1),"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    /// Directory path where the file system was last mounted. While not normally used, it could"},
{"lineNum":"  227","line":"    /// serve for auto-finding the mountpoint when not indicated on the command line. Again the"},
{"lineNum":"  228","line":"    /// path should be zero terminated for compatibility reasons. Valid path is constructed from"},
{"lineNum":"  229","line":"    /// ISO-Latin-1 characters."},
{"lineNum":"  230","line":"    last_mounted: [64]u8 align(1),"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    /// Value used by compression algorithms to determine the compression method(s) used."},
{"lineNum":"  233","line":"    algo_bitmap: packed struct(u32) {"},
{"lineNum":"  234","line":"        EXT2_LZV1_ALG:   bool,"},
{"lineNum":"  235","line":"        EXT2_LZRW3A_ALG: bool,"},
{"lineNum":"  236","line":"        EXT2_GZIP_ALG:   bool,"},
{"lineNum":"  237","line":"        EXT2_BZIP2_ALG:  bool,"},
{"lineNum":"  238","line":"        EXT2_LZO_ALG:    bool,"},
{"lineNum":"  239","line":"        __unused:         u27,"},
{"lineNum":"  240","line":"    } align(1),"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    // Performance hints"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    /// Value representing the number of blocks the implementation should attempt to"},
{"lineNum":"  245","line":"    /// pre-allocate when creating a new regular file."},
{"lineNum":"  246","line":"    prealloc_blocks: u8 align(1),"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    /// Value representing the number of blocks the implementation should attempt to"},
{"lineNum":"  249","line":"    /// pre-allocate when creating a new directory."},
{"lineNum":"  250","line":"    prealloc_dir_blocks: u8 align(1),"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    __alignment: u16 align(1),"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    // Journaling support"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    /// Value containing the uuid of the journal superblock."},
{"lineNum":"  257","line":"    journal_uuid: [16]u8 align(1),"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    /// Inode number of the journal file."},
{"lineNum":"  260","line":"    journal_inum: u32 align(1),"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    /// Device number of the journal file."},
{"lineNum":"  263","line":"    journal_dev: u32 align(1),"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    /// Inode number, pointing to the first inode in the list of inodes to delete."},
{"lineNum":"  266","line":"    last_orphan: u32 align(1),"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"    // Directory indexing support"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    /// An array of 4 32bit values containing the seeds used for the hash algorithm for"},
{"lineNum":"  271","line":"    /// directory indexing."},
{"lineNum":"  272","line":"    hash_seed: [4]u32 align(1),"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    /// Value containing the default hash version used for directory indexing."},
{"lineNum":"  275","line":"    def_hash_version: u8 align(1),"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    __padding_reserved: [3]u8 align(1),"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    // Other options"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    /// Value containing the default mount options for this file system."},
{"lineNum":"  282","line":"    default_mount_options: u32 align(1),"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    /// Value indicating the block group ID of the first meta block group."},
{"lineNum":"  285","line":"    first_meta_bg: u32 align(1),"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    __unused_reserved: [760]u8 align(1),"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    fn block_size(self: Superblock) u32 {","class":"lineCov","hits":"1","order":"681","possible_hits":"1",},
{"lineNum":"  290","line":"        return std.math.shl(u32, 1024, self.log_block_size);","class":"lineCov","hits":"1","order":"682","possible_hits":"1",},
{"lineNum":"  291","line":"    }"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    fn n_groups(self: Superblock) u32 {","class":"lineCov","hits":"1","order":"678","possible_hits":"1",},
{"lineNum":"  294","line":"        return self.inodes_count / self.inodes_per_group;","class":"lineCov","hits":"1","order":"679","possible_hits":"1",},
{"lineNum":"  295","line":"    }"},
{"lineNum":"  296","line":"};"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"/// Starts on the first block following the superblock."},
{"lineNum":"  299","line":"pub const BlockGroupDescriptorTable = []BlockGroupDescriptor;"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"/// For each block group in the file system, such a group_desc is created. Each represent a"},
{"lineNum":"  302","line":"/// single block group within the file system and the information within any one of them is"},
{"lineNum":"  303","line":"/// pertinent only to the group it is describing. Every block group descriptor table contains"},
{"lineNum":"  304","line":"/// all the information about all the block groups."},
{"lineNum":"  305","line":"pub const BlockGroupDescriptor = set_fields_alignment_in_struct(_BlockGroupDescriptor, 1);"},
{"lineNum":"  306","line":"const _BlockGroupDescriptor = extern struct {"},
{"lineNum":"  307","line":"    /// Block id of the first block of the \'block bitmap\' for the group represented."},
{"lineNum":"  308","line":"    ///"},
{"lineNum":"  309","line":"    /// The actual block bitmap is located within its own allocated blocks starting at the block"},
{"lineNum":"  310","line":"    /// ID specified by this value."},
{"lineNum":"  311","line":"    block_bitmap: u32,"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    /// Block id of the first block of the \'inode bitmap\' for the group represented."},
{"lineNum":"  314","line":"    inode_bitmap: u32,"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"    /// Block id of the first block of the \'inode table\' for the group represented."},
{"lineNum":"  317","line":"    inode_table: u32,"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    /// Value indicating the total number of free blocks for the represented group."},
{"lineNum":"  320","line":"    free_blocks_count: u16,"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"    /// Value indicating the total number of free inodes for the represented group."},
{"lineNum":"  323","line":"    free_inodes_count: u16,"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"    /// Value indicating the number of inodes allocated to directories for the represented"},
{"lineNum":"  326","line":"    /// group."},
{"lineNum":"  327","line":"    used_dirs_count: u16,"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    __padding: u16,"},
{"lineNum":"  330","line":"    __reserved: [12]u8,"},
{"lineNum":"  331","line":"};"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"pub const InodeTables = struct {"},
{"lineNum":"  334","line":"    tables: []InodeTable,"},
{"lineNum":"  335","line":"    filled: std.ArrayList(usize),"},
{"lineNum":"  336","line":"    gpa: Allocator,"},
{"lineNum":"  337","line":"    group_count: u32,"},
{"lineNum":"  338","line":"    inodes_per_group: u32,"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    pub fn init(gpa: Allocator, group_count: u32, inodes_per_group: u32) !InodeTables {","class":"lineCov","hits":"2","order":"699","possible_hits":"2",},
{"lineNum":"  341","line":"        const tables = try gpa.alloc(InodeTable, group_count);","class":"lineCov","hits":"1","order":"700","possible_hits":"1",},
{"lineNum":"  342","line":"        errdefer gpa.free(tables);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"        const filled = try std.ArrayList(usize).initCapacity(gpa, group_count);","class":"linePartCov","hits":"1","order":"701","possible_hits":"2",},
{"lineNum":"  345","line":"        errdefer filled.deinit();"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"        return .{","class":"lineCov","hits":"1","order":"702","possible_hits":"1",},
{"lineNum":"  348","line":"            .tables = tables,"},
{"lineNum":"  349","line":"            .filled = filled,"},
{"lineNum":"  350","line":"            .gpa = gpa,"},
{"lineNum":"  351","line":"            .group_count = group_count,"},
{"lineNum":"  352","line":"            .inodes_per_group = inodes_per_group,"},
{"lineNum":"  353","line":"        };"},
{"lineNum":"  354","line":"    }"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    pub fn deinit(self: InodeTables) void {","class":"lineCov","hits":"2","order":"719","possible_hits":"2",},
{"lineNum":"  357","line":"        for (self.filled.items) |filled_group_id| {","class":"lineCov","hits":"3","order":"720","possible_hits":"3",},
{"lineNum":"  358","line":"            self.gpa.free(self.tables[filled_group_id]);","class":"lineCov","hits":"3","order":"846","possible_hits":"3",},
{"lineNum":"  359","line":"        }","class":"lineCov","hits":"3","order":"721","possible_hits":"3",},
{"lineNum":"  360","line":"        self.gpa.free(self.tables);","class":"lineCov","hits":"1","order":"722","possible_hits":"1",},
{"lineNum":"  361","line":"        self.filled.deinit();","class":"lineCov","hits":"1","order":"723","possible_hits":"1",},
{"lineNum":"  362","line":"    }"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    /// Passed in `table` must be owned."},
{"lineNum":"  365","line":"    pub fn fill_for_group(self: *InodeTables, group_id: usize, table: InodeTable) !void {","class":"lineCov","hits":"2","order":"817","possible_hits":"2",},
{"lineNum":"  366","line":"        assert(group_id < self.tables.len);","class":"lineCov","hits":"1","order":"818","possible_hits":"1",},
{"lineNum":"  367","line":"        // NOTE: we may want to update some table (UNLIKELY), if we do, then we must"},
{"lineNum":"  368","line":"        // first remove the duplicate group_id from the list, or not insert a duplicate"},
{"lineNum":"  369","line":"        // or use a HashSet instead of ArrayList"},
{"lineNum":"  370","line":"        assert(!self.has_group_filled(group_id));","class":"lineCov","hits":"1","order":"819","possible_hits":"1",},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"        self.tables[group_id] = table;","class":"lineCov","hits":"2","order":"820","possible_hits":"2",},
{"lineNum":"  373","line":"        try self.filled.append(group_id);","class":"linePartCov","hits":"1","order":"821","possible_hits":"2",},
{"lineNum":"  374","line":"    }"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    pub fn has_group_filled(self: InodeTables, group_id: usize) bool {","class":"lineCov","hits":"2","order":"800","possible_hits":"2",},
{"lineNum":"  377","line":"        return std.mem.indexOfScalar(usize, self.filled.items, group_id) != null;","class":"lineCov","hits":"1","order":"801","possible_hits":"1",},
{"lineNum":"  378","line":"    }"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"    pub fn get_group_id_containing_inode_id(self: InodeTables, inode_id: u32) u32 {","class":"lineCov","hits":"2","order":"795","possible_hits":"2",},
{"lineNum":"  381","line":"        const group_id = (inode_id - 1) / self.inodes_per_group;","class":"lineCov","hits":"2","order":"796","possible_hits":"2",},
{"lineNum":"  382","line":"        assert(group_id < self.group_count);","class":"lineCov","hits":"1","order":"797","possible_hits":"1",},
{"lineNum":"  383","line":"        return group_id;","class":"lineCov","hits":"1","order":"798","possible_hits":"1",},
{"lineNum":"  384","line":"    }"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"    pub fn get_inode(self: InodeTables, inode_id: u32) Inode {","class":"lineCov","hits":"2","order":"823","possible_hits":"2",},
{"lineNum":"  387","line":"        const group_id = self.get_group_id_containing_inode_id(inode_id);","class":"lineCov","hits":"1","order":"824","possible_hits":"1",},
{"lineNum":"  388","line":"        // TODO: verify if -1 is correct. I think it is, because inode ids start from 1."},
{"lineNum":"  389","line":"        const inode_id_in_group = (inode_id - 1) % self.inodes_per_group;","class":"lineCov","hits":"2","order":"825","possible_hits":"2",},
{"lineNum":"  390","line":"        const inode = self.tables[group_id][inode_id_in_group];","class":"lineCov","hits":"3","order":"826","possible_hits":"3",},
{"lineNum":"  391","line":"        return inode;","class":"lineCov","hits":"1","order":"827","possible_hits":"1",},
{"lineNum":"  392","line":"    }"},
{"lineNum":"  393","line":"};"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"pub const InodeTable = []Inode;"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"/// Inode contains the information about a single physical file on the system. A file can be a"},
{"lineNum":"  398","line":"/// directory, a socket, a buffer, character or block device, symbolic link or a regular file."},
{"lineNum":"  399","line":"/// So an inode can be seen as a block of information related to an entity, describing its"},
{"lineNum":"  400","line":"/// location on disk, its size and its owner."},
{"lineNum":"  401","line":"pub const Inode = extern struct {"},
{"lineNum":"  402","line":"    const Mode = packed struct(u16) {"},
{"lineNum":"  403","line":"        const AccessRights = packed struct {"},
{"lineNum":"  404","line":"            /// Others execute."},
{"lineNum":"  405","line":"            EXT2_S_IXOTH: u1 = 0,"},
{"lineNum":"  406","line":"            /// Others write"},
{"lineNum":"  407","line":"            EXT2_S_IWOTH: u1 = 0,"},
{"lineNum":"  408","line":"            /// Others read."},
{"lineNum":"  409","line":"            EXT2_S_IROTH: u1 = 0,"},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"            /// Group execute."},
{"lineNum":"  412","line":"            EXT2_S_IXGRP: u1 = 0,"},
{"lineNum":"  413","line":"            /// Group write."},
{"lineNum":"  414","line":"            EXT2_S_IWGRP: u1 = 0,"},
{"lineNum":"  415","line":"            /// Group read."},
{"lineNum":"  416","line":"            EXT2_S_IRGRP: u1 = 0,"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"            /// User execute."},
{"lineNum":"  419","line":"            EXT2_S_IXUSR: u1 = 0,"},
{"lineNum":"  420","line":"            /// User write."},
{"lineNum":"  421","line":"            EXT2_S_IWUSR: u1 = 0,"},
{"lineNum":"  422","line":"            /// User read."},
{"lineNum":"  423","line":"            EXT2_S_IRUSR: u1 = 0,"},
{"lineNum":"  424","line":"        };"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"        const ProcessExecution = packed struct {"},
{"lineNum":"  427","line":"            /// Sticky bit."},
{"lineNum":"  428","line":"            EXT2_S_ISVTX: u1 = 0,"},
{"lineNum":"  429","line":"            /// Set process Group ID."},
{"lineNum":"  430","line":"            EXT2_S_ISGID: u1 = 0,"},
{"lineNum":"  431","line":"            /// Set process User ID."},
{"lineNum":"  432","line":"            EXT2_S_ISUID: u1 = 0,"},
{"lineNum":"  433","line":"        };"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"        const FileFormat = packed struct {"},
{"lineNum":"  436","line":"            /// FIFO."},
{"lineNum":"  437","line":"            EXT2_S_IFIFO: u1 = 0,"},
{"lineNum":"  438","line":"            /// Character device."},
{"lineNum":"  439","line":"            EXT2_S_IFCHR: u1 = 0,"},
{"lineNum":"  440","line":"            /// Directory."},
{"lineNum":"  441","line":"            EXT2_S_IFDIR: u1 = 0,"},
{"lineNum":"  442","line":"            /// Regular file."},
{"lineNum":"  443","line":"            EXT2_S_IFREG: u1 = 0,"},
{"lineNum":"  444","line":"        };"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"        /// Block device."},
{"lineNum":"  447","line":"        pub const EXT2_S_IFBLK: FileFormat = .{ .EXT2_S_IFCHR = 1, .EXT2_S_IFDIR = 1 };"},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"        /// Symbolic link."},
{"lineNum":"  450","line":"        pub const EXT2_S_IFLNK: FileFormat = .{ .EXT2_S_IFREG = 1, .EXT2_S_IFCHR = 1 };"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"        /// Socket."},
{"lineNum":"  453","line":"        pub const EXT2_S_IFSOCK: FileFormat = .{ .EXT2_S_IFREG = 1, .EXT2_S_IFDIR = 1 };"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"        access_rights: AccessRights,"},
{"lineNum":"  456","line":"        process_execution: ProcessExecution,"},
{"lineNum":"  457","line":"        file_format: FileFormat,"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"        pub fn backing_integer(self: Mode) @typeInfo(Mode).@\"struct\".backing_integer.? {","class":"lineCov","hits":"2","order":"829","possible_hits":"2",},
{"lineNum":"  460","line":"            return @bitCast(self);","class":"lineCov","hits":"1","order":"830","possible_hits":"1",},
{"lineNum":"  461","line":"        }"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"    };"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"    const Flags = packed struct(u32) {"},
{"lineNum":"  466","line":"        const Compression = packed struct {"},
{"lineNum":"  467","line":"            /// Dirty (modified)."},
{"lineNum":"  468","line":"            EXT2_DIRTY_FL: u1,"},
{"lineNum":"  469","line":"            /// Compressed blocks."},
{"lineNum":"  470","line":"            EXT2_COMPRBLK_FL: u1,"},
{"lineNum":"  471","line":"            /// Access raw compressed data."},
{"lineNum":"  472","line":"            EXT2_NOCOMPR_FL: u1,"},
{"lineNum":"  473","line":"            /// Compression error."},
{"lineNum":"  474","line":"            EXT2_ECOMPR_FL: u1,"},
{"lineNum":"  475","line":"        };"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"        /// Secure deletion."},
{"lineNum":"  478","line":"        EXT2_SECRM_FL: u1,"},
{"lineNum":"  479","line":"        /// Record for undelete."},
{"lineNum":"  480","line":"        EXT2_UNRM_FL: u1,"},
{"lineNum":"  481","line":"        /// Compressed file."},
{"lineNum":"  482","line":"        EXT2_COMPR_FL: u1,"},
{"lineNum":"  483","line":"        /// Synchronous updates."},
{"lineNum":"  484","line":"        EXT2_SYNC_FL: u1,"},
{"lineNum":"  485","line":"        /// Immutable file."},
{"lineNum":"  486","line":"        EXT2_IMMUTABLE_FL: u1,"},
{"lineNum":"  487","line":"        /// Append only."},
{"lineNum":"  488","line":"        EXT2_APPEND_FL: u1,"},
{"lineNum":"  489","line":"        /// do not dump/Delete file."},
{"lineNum":"  490","line":"        EXT2_NODUMP_FL: u1,"},
{"lineNum":"  491","line":"        /// Do not update .i_atime."},
{"lineNum":"  492","line":"        EXT2_NOATIME_FL: u1,"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"        /// Reserved for compression usage."},
{"lineNum":"  495","line":"        compression: Compression,"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"        /// B-tree format directory."},
{"lineNum":"  498","line":"        EXT2_BTREE_FL: u1,"},
{"lineNum":"  499","line":"        /// Hash indexed directory."},
{"lineNum":"  500","line":"        EXT2_INDEX_FL: u1,"},
{"lineNum":"  501","line":"        /// AFS directory."},
{"lineNum":"  502","line":"        EXT2_IMAGIC_FL: u1,"},
{"lineNum":"  503","line":"        /// Journal file data."},
{"lineNum":"  504","line":"        EXT3_JOURNAL_DATA_FL: u1,"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"        __unused: u15,"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"        /// Reserved for ext2 library."},
{"lineNum":"  509","line":"        EXT2_RESERVED_FL: u1,"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"        pub fn backing_integer(self: Flags) @typeInfo(Flags).@\"struct\".backing_integer.? {","class":"lineCov","hits":"2","order":"835","possible_hits":"2",},
{"lineNum":"  512","line":"            return @bitCast(self);","class":"lineCov","hits":"1","order":"836","possible_hits":"1",},
{"lineNum":"  513","line":"        }"},
{"lineNum":"  514","line":"    };"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"    const OSD2 = extern union {"},
{"lineNum":"  517","line":"        hurd: extern struct {"},
{"lineNum":"  518","line":"            /// Fragment number. Always 0 GNU HURD since fragments are not supported. Obsolete"},
{"lineNum":"  519","line":"            /// with Ext4."},
{"lineNum":"  520","line":"            frag: u8,"},
{"lineNum":"  521","line":"            /// Fragment size. Always 0 in GNU HURD since fragments are not supported. Obsolete"},
{"lineNum":"  522","line":"            /// with Ext4."},
{"lineNum":"  523","line":"            fsize: u8,"},
{"lineNum":"  524","line":"            /// High 16bit of the 32bit mode."},
{"lineNum":"  525","line":"            mode_high: u16,"},
{"lineNum":"  526","line":"            /// High 16bit of user id."},
{"lineNum":"  527","line":"            uid_high: u16,"},
{"lineNum":"  528","line":"            /// High 16bit of group id."},
{"lineNum":"  529","line":"            gid_high: u16,"},
{"lineNum":"  530","line":"            /// User id of the assigned file author. If this value is set to -1, the POSIX user"},
{"lineNum":"  531","line":"            /// id will be used."},
{"lineNum":"  532","line":"            author: i32,"},
{"lineNum":"  533","line":"        },"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"        linux: extern struct {"},
{"lineNum":"  536","line":"            /// Fragment number."},
{"lineNum":"  537","line":"            ///"},
{"lineNum":"  538","line":"            /// Always 0 in Linux since fragments are not supported."},
{"lineNum":"  539","line":"            ///"},
{"lineNum":"  540","line":"            /// Important:"},
{"lineNum":"  541","line":"            /// A new implementation of Ext2 should completely disregard this field if the"},
{"lineNum":"  542","line":"            /// i_faddr value is 0; in Ext4 this field is combined with l_i_fsize to become the"},
{"lineNum":"  543","line":"            /// high 16bit of the 48bit blocks count for the inode data."},
{"lineNum":"  544","line":"            frag: u8,"},
{"lineNum":"  545","line":"            /// Fragment size."},
{"lineNum":"  546","line":"            ///"},
{"lineNum":"  547","line":"            /// Always 0 in Linux since fragments are not supported. Important"},
{"lineNum":"  548","line":"            ///"},
{"lineNum":"  549","line":"            /// A new implementation of Ext2 should completely disregard this field if the"},
{"lineNum":"  550","line":"            /// i_faddr value is 0; in Ext4 this field is combined with l_i_frag to become the"},
{"lineNum":"  551","line":"            /// high 16bit of the 48bit blocks count for the inode data."},
{"lineNum":"  552","line":"            fsize: u8,"},
{"lineNum":"  553","line":"            __reserved: u16,"},
{"lineNum":"  554","line":"            /// High 16bit of user id."},
{"lineNum":"  555","line":"            uid_high: u16,"},
{"lineNum":"  556","line":"            /// High 16bit of group id."},
{"lineNum":"  557","line":"            gid_high: u16,"},
{"lineNum":"  558","line":"            __reserved2: u32,"},
{"lineNum":"  559","line":"        },"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"        masix: extern struct {"},
{"lineNum":"  562","line":"            /// Fragment number. Always 0 in Masix as framgents are not supported. Obsolete with"},
{"lineNum":"  563","line":"            /// Ext4."},
{"lineNum":"  564","line":"            frag: u8,"},
{"lineNum":"  565","line":"            /// Fragment size. Always 0 in Masix as fragments are not supported. Obsolete with"},
{"lineNum":"  566","line":"            /// Ext4."},
{"lineNum":"  567","line":"            fsize: u8,"},
{"lineNum":"  568","line":"            __reserved: [10]u8,"},
{"lineNum":"  569","line":"        },"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"        pub fn backing_integer(self: OSD2) @Type(.{"},
{"lineNum":"  572","line":"            .int = .{ .signedness = .unsigned, .bits = @bitSizeOf(OSD2) }"},
{"lineNum":"  573","line":"        }) {","class":"lineCov","hits":"1","order":"843","possible_hits":"1",},
{"lineNum":"  574","line":"            return @bitCast(self);","class":"lineCov","hits":"1","order":"844","possible_hits":"1",},
{"lineNum":"  575","line":"        }"},
{"lineNum":"  576","line":"    };"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    /// Value used to indicate the format of the described file and the access rights."},
{"lineNum":"  579","line":"    mode: Mode,"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    /// User id associated with the file."},
{"lineNum":"  582","line":"    uid: u16,"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"    /// In revision 0, (signed) 32bit value indicating the size of the file in bytes. In"},
{"lineNum":"  585","line":"    /// revision 1 and later revisions, and only for regular files, this represents the lower"},
{"lineNum":"  586","line":"    /// 32-bit of the file size; the upper 32-bit is located in the i_dir_acl."},
{"lineNum":"  587","line":"    size: u32,"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"    /// Value representing the number of seconds since january 1st 1970 of the last time this"},
{"lineNum":"  590","line":"    /// inode was accessed."},
{"lineNum":"  591","line":"    atime: u32,"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"    /// Value representing the number of seconds since january 1st 1970, of when the inode was"},
{"lineNum":"  594","line":"    /// created."},
{"lineNum":"  595","line":"    ctime: u32,"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"    /// Value representing the number of seconds since january 1st 1970, of the last time this"},
{"lineNum":"  598","line":"    /// inode was modified."},
{"lineNum":"  599","line":"    mtime: u32,"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"    /// Value representing the number of seconds since january 1st 1970, of when the inode was"},
{"lineNum":"  602","line":"    /// deleted."},
{"lineNum":"  603","line":"    dtime: u32,"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"    /// Value of the POSIX group having access to this file."},
{"lineNum":"  606","line":"    gid: u16,"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"    /// Value indicating how many times this particular inode is linked (referred to). Most"},
{"lineNum":"  609","line":"    /// files will have a link count of 1. Files with hard links pointing to them will have an"},
{"lineNum":"  610","line":"    /// additional count for each hard link."},
{"lineNum":"  611","line":"    ///"},
{"lineNum":"  612","line":"    /// Symbolic links do not affect the link count of an inode. When the link count reaches 0"},
{"lineNum":"  613","line":"    /// the inode and all its associated blocks are freed."},
{"lineNum":"  614","line":"    links_count: u16,"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"    /// Value representing the total number of 512-bytes blocks reserved to contain the data of"},
{"lineNum":"  617","line":"    /// this inode, regardless if these blocks are used or not. The block numbers of these"},
{"lineNum":"  618","line":"    /// reserved blocks are contained in the i_block array."},
{"lineNum":"  619","line":"    ///"},
{"lineNum":"  620","line":"    /// Since this value represents 512-byte blocks and not file system blocks, this value"},
{"lineNum":"  621","line":"    /// should not be directly used as an index to the i_block array. Rather, the maximum index"},
{"lineNum":"  622","line":"    /// of the i_block array should be computed from i_blocks / ((1024<<s_log_block_size)/512),"},
{"lineNum":"  623","line":"    /// or once simplified, i_blocks/(2<<s_log_block_size)."},
{"lineNum":"  624","line":"    blocks: u32,"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"    /// Value indicating how the ext2 implementation should behave when accessing the data for"},
{"lineNum":"  627","line":"    /// this inode."},
{"lineNum":"  628","line":"    flags: Flags,"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"    /// OS dependent value."},
{"lineNum":"  631","line":"    ///"},
{"lineNum":"  632","line":"    /// Hurd: 32bit value labeled as \'translator\'."},
{"lineNum":"  633","line":"    /// Linux: 32bit value currently reserved."},
{"lineNum":"  634","line":"    /// Masix: 32bit value currently reserved."},
{"lineNum":"  635","line":"    osd1: u32,"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"    ///  15 x 32bit block numbers pointing to the blocks containing the data for this inode. The"},
{"lineNum":"  638","line":"    ///  first 12 blocks are direct blocks. The 13th entry in this array is the block number of"},
{"lineNum":"  639","line":"    ///  the first indirect block; which is a block containing an array of block ID containing"},
{"lineNum":"  640","line":"    ///  the data. Therefore, the 13th block of the file will be the first block ID contained in"},
{"lineNum":"  641","line":"    ///  the indirect block. With a 1KiB block size, blocks 13 to 268 of the file data are"},
{"lineNum":"  642","line":"    ///  contained in this indirect block."},
{"lineNum":"  643","line":"    ///"},
{"lineNum":"  644","line":"    /// The 14th entry in this array is the block number of the first doubly-indirect block;"},
{"lineNum":"  645","line":"    /// which is a block containing an array of indirect block IDs, with each of those indirect"},
{"lineNum":"  646","line":"    /// blocks containing an array of blocks containing the data. In a 1KiB block size, there"},
{"lineNum":"  647","line":"    /// would be 256 indirect blocks per doubly-indirect block, with 256 direct blocks per"},
{"lineNum":"  648","line":"    /// indirect block for a total of 65536 blocks per doubly-indirect block."},
{"lineNum":"  649","line":"    ///"},
{"lineNum":"  650","line":"    /// The 15th entry in this array is the block number of the triply-indirect block; which is"},
{"lineNum":"  651","line":"    /// a block containing an array of doubly-indrect block IDs, with each of those"},
{"lineNum":"  652","line":"    /// doubly-indrect block containing an array of indrect block, and each of those indirect"},
{"lineNum":"  653","line":"    /// block containing an array of direct block. In a 1KiB file system, this would be a total"},
{"lineNum":"  654","line":"    /// of 16777216 blocks per triply-indirect block."},
{"lineNum":"  655","line":"    ///"},
{"lineNum":"  656","line":"    /// In the original implementation of Ext2, a value of 0 in this array effectively"},
{"lineNum":"  657","line":"    /// terminated it with no further block defined. In sparse files, it is possible to have"},
{"lineNum":"  658","line":"    /// some blocks allocated and some others not yet allocated with the value 0 being used to"},
{"lineNum":"  659","line":"    /// indicate which blocks are not yet allocated for this file."},
{"lineNum":"  660","line":"    block: [15]u32,"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"    /// Value used to indicate the file version (used by NFS)."},
{"lineNum":"  663","line":"    generation: u32,"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"    /// Value indicating the block number containing the extended attributes. In revision 0 this"},
{"lineNum":"  666","line":"    /// value is always 0."},
{"lineNum":"  667","line":"    file_acl: u32,"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    /// In revision 0 this 32bit value is always 0. In revision 1, for regular files this 32bit"},
{"lineNum":"  670","line":"    /// value contains the high 32 bits of the 64bit file size."},
{"lineNum":"  671","line":"    ///"},
{"lineNum":"  672","line":"    /// Linux sets this value to 0 if the file is not a regular file (i.e. block devices,"},
{"lineNum":"  673","line":"    /// directories, etc). In theory, this value could be set to point to a block containing"},
{"lineNum":"  674","line":"    /// extended attributes of the directory or special file."},
{"lineNum":"  675","line":"    dir_acl: u32,"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"    /// Value indicating the location of the file fragment."},
{"lineNum":"  678","line":"    ///"},
{"lineNum":"  679","line":"    /// In Linux and GNU HURD, since fragments are unsupported this value is always 0. In Ext4"},
{"lineNum":"  680","line":"    /// this value is now marked as obsolete."},
{"lineNum":"  681","line":"    faddr: u32,"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"    /// 96bit OS dependant structure."},
{"lineNum":"  684","line":"    osd2: OSD2,"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"    pub fn is_dir(self: Inode) bool {","class":"lineCov","hits":"1","order":"859","possible_hits":"1",},
{"lineNum":"  687","line":"        return self.mode.file_format == Mode.FileFormat{ .EXT2_S_IFDIR = 1 };","class":"lineCov","hits":"1","order":"860","possible_hits":"1",},
{"lineNum":"  688","line":"    }"},
{"lineNum":"  689","line":"};"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"const DirEntry = struct {"},
{"lineNum":"  692","line":"    const FileType = enum(u8) {"},
{"lineNum":"  693","line":"        /// Unknown file type."},
{"lineNum":"  694","line":"        EXT2_FT_UNKNOWN  = 0,"},
{"lineNum":"  695","line":"        /// Regular file."},
{"lineNum":"  696","line":"        EXT2_FT_REG_FILE = 1,"},
{"lineNum":"  697","line":"        /// Directory file."},
{"lineNum":"  698","line":"        EXT2_FT_DIR      = 2,"},
{"lineNum":"  699","line":"        /// Character device."},
{"lineNum":"  700","line":"        EXT2_FT_CHRDEV   = 3,"},
{"lineNum":"  701","line":"        /// Block device."},
{"lineNum":"  702","line":"        EXT2_FT_BLKDEV   = 4,"},
{"lineNum":"  703","line":"        /// Buffer file."},
{"lineNum":"  704","line":"        EXT2_FT_FIFO     = 5,"},
{"lineNum":"  705","line":"        /// Socket file."},
{"lineNum":"  706","line":"        EXT2_FT_SOCK     = 6,"},
{"lineNum":"  707","line":"        /// Symbolic link."},
{"lineNum":"  708","line":"        EXT2_FT_SYMLINK  = 7,"},
{"lineNum":"  709","line":"    };"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"    /// Inode number of the file entry. A value of 0 indicate that the entry is not used."},
{"lineNum":"  712","line":"    inode_id: u32,"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"    /// Displacement to the next directory entry from the start of the current directory entry."},
{"lineNum":"  715","line":"    /// This field must have a value at least equal to the length of the current record."},
{"lineNum":"  716","line":"    ///"},
{"lineNum":"  717","line":"    /// The directory entries must be aligned on 4 bytes boundaries and there cannot be any"},
{"lineNum":"  718","line":"    /// directory entry spanning multiple data blocks. If an entry cannot completely fit in one"},
{"lineNum":"  719","line":"    /// block, it must be pushed to the next data block and the rec_len of the previous entry"},
{"lineNum":"  720","line":"    /// properly adjusted."},
{"lineNum":"  721","line":"    ///"},
{"lineNum":"  722","line":"    /// Since this value cannot be negative, when a file is removed the previous record within"},
{"lineNum":"  723","line":"    /// the block has to be modified to point to the next valid record within the block or to"},
{"lineNum":"  724","line":"    /// the end of the block when no other directory entry is present."},
{"lineNum":"  725","line":"    ///"},
{"lineNum":"  726","line":"    /// If the first entry within the block is removed, a blank record will be created and point"},
{"lineNum":"  727","line":"    /// to the next directory entry or to the end of the block."},
{"lineNum":"  728","line":"    rec_len: u16,"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"    /// Value indicating how many bytes of character data are contained in the name."},
{"lineNum":"  731","line":"    ///"},
{"lineNum":"  732","line":"    /// This value must never be larger than rec_len - 8. If the directory entry name is updated"},
{"lineNum":"  733","line":"    /// and cannot fit in the existing directory entry, the entry may have to be relocated in a"},
{"lineNum":"  734","line":"    /// new directory entry of sufficient size and possibly stored in a new data block."},
{"lineNum":"  735","line":"    name_len: u8,"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"    /// In revision 0, this field was the upper 8-bit of the then 16-bit name_len. Since all"},
{"lineNum":"  738","line":"    /// implementations still limited the file names to 255 characters this 8-bit value was"},
{"lineNum":"  739","line":"    /// always 0."},
{"lineNum":"  740","line":"    ///"},
{"lineNum":"  741","line":"    /// This value must match the inode type defined in the related inode entry."},
{"lineNum":"  742","line":"    file_type: FileType,"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"    name: []u8,"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"    pub fn init(gpa: Allocator, reader: *Reader) !DirEntry {","class":"lineCov","hits":"2","order":"879","possible_hits":"2",},
{"lineNum":"  747","line":"        // NOTE: ASSUMES THIS IS NOT REV 0!"},
{"lineNum":"  748","line":"        const inode_id = reader.read_u32();","class":"lineCov","hits":"1","order":"880","possible_hits":"1",},
{"lineNum":"  749","line":"        const rec_len = reader.read_u16();","class":"lineCov","hits":"1","order":"886","possible_hits":"1",},
{"lineNum":"  750","line":"        const name_len = reader.read_u8();","class":"lineCov","hits":"1","order":"892","possible_hits":"1",},
{"lineNum":"  751","line":"        const file_type: FileType = @enumFromInt(reader.read_u8());","class":"lineCov","hits":"1","order":"896","possible_hits":"1",},
{"lineNum":"  752","line":"        const name = try gpa.alloc(u8, name_len);","class":"lineCov","hits":"1","order":"897","possible_hits":"1",},
{"lineNum":"  753","line":"        const read = try reader.read(name);","class":"lineCov","hits":"1","order":"898","possible_hits":"1",},
{"lineNum":"  754","line":"        assert(read == name.len);","class":"lineCov","hits":"1","order":"899","possible_hits":"1",},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"        const aligned = std.mem.alignForward(usize, reader.idx, 4) - reader.idx;","class":"lineCov","hits":"1","order":"900","possible_hits":"1",},
{"lineNum":"  757","line":"        try reader.seek_by(@intCast(aligned));","class":"lineCov","hits":"1","order":"901","possible_hits":"1",},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"        return .{","class":"lineCov","hits":"1","order":"902","possible_hits":"1",},
{"lineNum":"  760","line":"            .inode_id = inode_id,"},
{"lineNum":"  761","line":"            .rec_len = rec_len,"},
{"lineNum":"  762","line":"            .name_len = name_len,"},
{"lineNum":"  763","line":"            .file_type = file_type,"},
{"lineNum":"  764","line":"            .name = name,"},
{"lineNum":"  765","line":"        };"},
{"lineNum":"  766","line":"    }"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"    pub fn deinit(self: DirEntry, gpa: Allocator) void {","class":"lineCov","hits":"2","order":"924","possible_hits":"2",},
{"lineNum":"  769","line":"        gpa.free(self.name);","class":"lineCov","hits":"1","order":"925","possible_hits":"1",},
{"lineNum":"  770","line":"    }"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"    pub fn free_entries(gpa: Allocator, entries: []DirEntry) void {","class":"lineCov","hits":"2","order":"921","possible_hits":"2",},
{"lineNum":"  773","line":"        if (entries.len > 0) {","class":"lineCov","hits":"2","order":"922","possible_hits":"2",},
{"lineNum":"  774","line":"            for (entries) |e| e.deinit(gpa);","class":"lineCov","hits":"1","order":"923","possible_hits":"1",},
{"lineNum":"  775","line":"        }"},
{"lineNum":"  776","line":"        gpa.free(entries);","class":"lineCov","hits":"1","order":"926","possible_hits":"1",},
{"lineNum":"  777","line":"    }"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"    pub fn free_entries_without_names(gpa: Allocator, entries: []DirEntry) void {"},
{"lineNum":"  780","line":"        gpa.free(entries);"},
{"lineNum":"  781","line":"    }"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"    pub fn is_dir(self: DirEntry) bool {","class":"lineCov","hits":"1","order":"942","possible_hits":"1",},
{"lineNum":"  784","line":"        return self.file_type == .EXT2_FT_DIR;","class":"lineCov","hits":"1","order":"943","possible_hits":"1",},
{"lineNum":"  785","line":"    }"},
{"lineNum":"  786","line":"};"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"pub const Error ="},
{"lineNum":"  789","line":"    Allocator.Error"},
{"lineNum":"  790","line":"    || std.fs.File.ReadError"},
{"lineNum":"  791","line":"    || error{"},
{"lineNum":"  792","line":"        NotEXT2,"},
{"lineNum":"  793","line":"        UnsupportedEXT2Revision,"},
{"lineNum":"  794","line":"        FileTooSmall,"},
{"lineNum":"  795","line":"        UnimplementedCurrently,"},
{"lineNum":"  796","line":"        NotEnoughReadToParseSuperblock,"},
{"lineNum":"  797","line":"        NotEnoughReadToBlockGroup"},
{"lineNum":"  798","line":"    };"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"gpa: Allocator,"},
{"lineNum":"  801","line":"reader: Reader,"},
{"lineNum":"  802","line":"superblock: *Superblock,"},
{"lineNum":"  803","line":"bg_desc_table: BlockGroupDescriptorTable,"},
{"lineNum":"  804","line":"/// Should always be equal in len to bg_desc_table (one inode_table per group)."},
{"lineNum":"  805","line":"inode_tables: InodeTables,"},
{"lineNum":"  806","line":"n_groups: u32,"},
{"lineNum":"  807","line":"block_size: u32,"},
{"lineNum":"  808","line":"is_sparse: bool,"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"pub fn estimate(alloc: Allocator, reader: *Reader) f32 {","class":"lineCov","hits":"2","order":"197","possible_hits":"2",},
{"lineNum":"  811","line":"    _ = alloc;"},
{"lineNum":"  812","line":"    _ = reader;"},
{"lineNum":"  813","line":"    return 0;","class":"lineCov","hits":"1","order":"198","possible_hits":"1",},
{"lineNum":"  814","line":"}"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"pub fn init(gpa: Allocator, reader: *Reader) Error!EXT2 {","class":"lineCov","hits":"2","order":"163","possible_hits":"2",},
{"lineNum":"  817","line":"    const superblock = try parse_superblock(gpa, reader);","class":"lineCov","hits":"1","order":"164","possible_hits":"1",},
{"lineNum":"  818","line":"    errdefer gpa.destroy(superblock);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"    if (superblock.magic != 0xef53) return error.NotEXT2;","class":"linePartCov","hits":"1","order":"674","possible_hits":"2",},
{"lineNum":"  821","line":"    // TODO: handle revision 0 too (maybe)"},
{"lineNum":"  822","line":"    if (superblock.rev_level != .EXT2_DYNAMIC_REV) return error.UnsupportedEXT2Revision;","class":"linePartCov","hits":"1","order":"675","possible_hits":"2",},
{"lineNum":"  823","line":""},
{"lineNum":"  824","line":"    var self: EXT2 = .{","class":"lineCov","hits":"1","order":"676","possible_hits":"1",},
{"lineNum":"  825","line":"        .gpa = gpa,"},
{"lineNum":"  826","line":"        .reader = reader.*,"},
{"lineNum":"  827","line":"        .superblock = superblock,"},
{"lineNum":"  828","line":"        .bg_desc_table = &.{},"},
{"lineNum":"  829","line":"        .inode_tables = undefined,"},
{"lineNum":"  830","line":"        .n_groups = superblock.n_groups(),","class":"lineCov","hits":"1","order":"677","possible_hits":"1",},
{"lineNum":"  831","line":"        .block_size = superblock.block_size(),","class":"lineCov","hits":"1","order":"680","possible_hits":"1",},
{"lineNum":"  832","line":"        .is_sparse = superblock.feature_ro_compat.EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER,","class":"lineCov","hits":"1","order":"683","possible_hits":"1",},
{"lineNum":"  833","line":"    };"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"    self.bg_desc_table = try parse_bg_desc_table(&self);","class":"linePartCov","hits":"1","order":"684","possible_hits":"3",},
{"lineNum":"  836","line":"    errdefer gpa.free(self.bg_desc_table);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"    self.inode_tables = try InodeTables.init(gpa, @intCast(self.bg_desc_table.len), self.superblock.inodes_per_group);","class":"linePartCov","hits":"1","order":"698","possible_hits":"2",},
{"lineNum":"  839","line":"    errdefer self.inode_tables.deinit();"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    return self;","class":"lineCov","hits":"1","order":"703","possible_hits":"1",},
{"lineNum":"  842","line":"}"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"pub fn deinit(self: EXT2) void {","class":"lineCov","hits":"2","order":"715","possible_hits":"2",},
{"lineNum":"  845","line":"    self.gpa.destroy(self.superblock);","class":"lineCov","hits":"1","order":"716","possible_hits":"1",},
{"lineNum":"  846","line":"    self.gpa.free(self.bg_desc_table);","class":"lineCov","hits":"1","order":"717","possible_hits":"1",},
{"lineNum":"  847","line":"    self.inode_tables.deinit();","class":"lineCov","hits":"1","order":"718","possible_hits":"1",},
{"lineNum":"  848","line":"    self.reader.deinit();","class":"lineCov","hits":"1","order":"724","possible_hits":"1",},
{"lineNum":"  849","line":"}"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"pub fn get_size(self: EXT2) f64 {"},
{"lineNum":"  852","line":"    return @floatFromInt(self.superblock.blocks_count * self.block_size);"},
{"lineNum":"  853","line":"}"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"pub fn get_free_size(self: EXT2) f64 {"},
{"lineNum":"  856","line":"    return @floatFromInt(self.superblock.free_blocks_count * self.block_size);"},
{"lineNum":"  857","line":"}"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"fn parse_superblock(gpa: Allocator, reader: *Reader) Error!*Superblock {","class":"lineCov","hits":"2","order":"165","possible_hits":"2",},
{"lineNum":"  860","line":"    return try parse_superblock_at_offset(gpa, reader, SuperblockOffset);","class":"lineCov","hits":"1","order":"166","possible_hits":"1",},
{"lineNum":"  861","line":"}"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"fn parse_superblock_at_offset(gpa: Allocator, reader: *Reader, offset: usize) Error!*Superblock {","class":"lineCov","hits":"2","order":"167","possible_hits":"2",},
{"lineNum":"  864","line":"    const s = try gpa.create(Superblock);","class":"lineCov","hits":"1","order":"168","possible_hits":"1",},
{"lineNum":"  865","line":"    errdefer gpa.destroy(s);","class":"lineCov","hits":"1","order":"173","possible_hits":"1",},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"    const dest = std.mem.asBytes(s);","class":"lineCov","hits":"1","order":"169","possible_hits":"1",},
{"lineNum":"  868","line":"    try reader.seek_to(offset);","class":"lineCov","hits":"1","order":"170","possible_hits":"1",},
{"lineNum":"  869","line":"    const read = try reader.read(dest);","class":"lineCov","hits":"1","order":"171","possible_hits":"1",},
{"lineNum":"  870","line":"    if (read != dest.len) return error.NotEnoughReadToParseSuperblock;","class":"lineCov","hits":"2","order":"172","possible_hits":"2",},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"    return s;","class":"lineCov","hits":"1","order":"673","possible_hits":"1",},
{"lineNum":"  873","line":"}"},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"fn parse_bg_desc_table(self: *EXT2) Error!BlockGroupDescriptorTable {","class":"lineCov","hits":"2","order":"685","possible_hits":"2",},
{"lineNum":"  876","line":"    const offset = self.block_group_desc_table_offset(0);","class":"lineCov","hits":"1","order":"686","possible_hits":"1",},
{"lineNum":"  877","line":"    return try self.parse_bg_desc_table_at_offset(offset);","class":"lineCov","hits":"1","order":"689","possible_hits":"1",},
{"lineNum":"  878","line":"}"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"fn parse_bg_desc_table_at_offset(self: *EXT2, offset: usize) Error!BlockGroupDescriptorTable {","class":"lineCov","hits":"2","order":"690","possible_hits":"2",},
{"lineNum":"  881","line":"    const table = try self.gpa.alloc(BlockGroupDescriptor, self.n_groups);","class":"lineCov","hits":"1","order":"691","possible_hits":"1",},
{"lineNum":"  882","line":"    errdefer self.gpa.free(table);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"    try self.reader.seek_to(offset);","class":"lineCov","hits":"1","order":"692","possible_hits":"1",},
{"lineNum":"  885","line":"    const size = self.n_groups * @sizeOf(BlockGroupDescriptor);","class":"lineCov","hits":"1","order":"693","possible_hits":"1",},
{"lineNum":"  886","line":"    const dest: []u8 = @as([*]u8, @ptrCast(table))[0..size];","class":"lineCov","hits":"2","order":"694","possible_hits":"2",},
{"lineNum":"  887","line":"    const read = try self.reader.read(dest);","class":"lineCov","hits":"1","order":"695","possible_hits":"1",},
{"lineNum":"  888","line":"    if (read != size) return error.NotEnoughReadToBlockGroup;","class":"linePartCov","hits":"1","order":"696","possible_hits":"2",},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    return table;","class":"lineCov","hits":"1","order":"697","possible_hits":"1",},
{"lineNum":"  891","line":"}"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"/// Should always be the next block over from superblock (check if filesystem has sparse copies)."},
{"lineNum":"  894","line":"fn block_group_desc_table_offset(self: EXT2, group_idx: usize) usize {","class":"lineCov","hits":"2","order":"687","possible_hits":"2",},
{"lineNum":"  895","line":"    if (group_idx == 0) return if (self.block_size == @sizeOf(Superblock)) self.block_size * 2 else self.block_size;","class":"lineCov","hits":"2","order":"688","possible_hits":"2",},
{"lineNum":"  896","line":"    const bg_offset = self.block_group_offset(group_idx);","class":"lineCov","hits":"1","order":"732","possible_hits":"1",},
{"lineNum":"  897","line":"    return bg_offset + self.block_size;","class":"linePartCov","hits":"1","order":"733","possible_hits":"2",},
{"lineNum":"  898","line":"}"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"fn block_group_offset(self: EXT2, group_idx: usize) usize {","class":"lineCov","hits":"2","order":"728","possible_hits":"2",},
{"lineNum":"  901","line":"    if (group_idx == 0) return SuperblockOffset;","class":"linePartCov","hits":"1","order":"729","possible_hits":"2",},
{"lineNum":"  902","line":"    return self.block_size * group_idx * self.superblock.blocks_per_group;","class":"linePartCov","hits":"1","order":"730","possible_hits":"2",},
{"lineNum":"  903","line":"}"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"fn block_offset(self: EXT2, block_id: u32) usize {","class":"lineCov","hits":"2","order":"873","possible_hits":"2",},
{"lineNum":"  906","line":"    return self.block_size * block_id;","class":"lineCov","hits":"1","order":"874","possible_hits":"1",},
{"lineNum":"  907","line":"}"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"fn is_backup_block_group(self: EXT2, block_group_idx: usize) bool {","class":"lineCov","hits":"2","order":"736","possible_hits":"2",},
{"lineNum":"  910","line":"    if (!self.is_sparse) return true;","class":"linePartCov","hits":"1","order":"737","possible_hits":"2",},
{"lineNum":"  911","line":"    if (block_group_idx == 1) return true;","class":"linePartCov","hits":"1","order":"738","possible_hits":"2",},
{"lineNum":"  912","line":""},
{"lineNum":"  913","line":"    // power of 3, 5, 7"},
{"lineNum":"  914","line":"    if (is_power_of_base(block_group_idx, 3) or is_power_of_base(block_group_idx, 5) or is_power_of_base(block_group_idx, 7))","class":"lineCov","hits":"2","order":"739","possible_hits":"2",},
{"lineNum":"  915","line":"        return true;","class":"lineCov","hits":"1","order":"749","possible_hits":"1",},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"    return false;","class":"lineCov","hits":"1","order":"746","possible_hits":"1",},
{"lineNum":"  918","line":"}"},
{"lineNum":"  919","line":""},
{"lineNum":"  920","line":"fn is_power_of_base(num: usize, base: usize) bool {","class":"lineCov","hits":"2","order":"740","possible_hits":"2",},
{"lineNum":"  921","line":"    var n = num;","class":"lineCov","hits":"1","order":"741","possible_hits":"1",},
{"lineNum":"  922","line":"    if (n == 0) return false;","class":"lineCov","hits":"1","order":"742","possible_hits":"1",},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"    while (n % base == 0) {","class":"lineCov","hits":"2","order":"743","possible_hits":"2",},
{"lineNum":"  925","line":"        n /= base;","class":"lineCov","hits":"3","order":"748","possible_hits":"3",},
{"lineNum":"  926","line":"    }","class":"lineCov","hits":"3","order":"744","possible_hits":"3",},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"    return n == 1;","class":"lineCov","hits":"1","order":"745","possible_hits":"1",},
{"lineNum":"  929","line":"}"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"const ROOT_INODE = 2;"},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"fn list_files(self: EXT2, inode_id: u32) !void {"},
{"lineNum":"  934","line":"    _ = self;"},
{"lineNum":"  935","line":"    _ = inode_id;"},
{"lineNum":"  936","line":"}"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"fn get_used_blocks_in_group(self: EXT2, group_id: u32) u32 {","class":"lineCov","hits":"2","order":"773","possible_hits":"2",},
{"lineNum":"  939","line":"    assert(group_id < self.bg_desc_table.len);","class":"lineCov","hits":"1","order":"774","possible_hits":"1",},
{"lineNum":"  940","line":"    return self.superblock.blocks_per_group - self.bg_desc_table[group_id].free_blocks_count;","class":"lineCov","hits":"1","order":"775","possible_hits":"1",},
{"lineNum":"  941","line":"}"},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":"/// Caller owns the returned InodeTable and must free it."},
{"lineNum":"  944","line":"fn get_inode_table(self: *EXT2, group_id: u32) !InodeTable {","class":"lineCov","hits":"2","order":"803","possible_hits":"2",},
{"lineNum":"  945","line":"    assert(group_id < self.bg_desc_table.len);","class":"lineCov","hits":"1","order":"804","possible_hits":"1",},
{"lineNum":"  946","line":"    const i_table = try self.gpa.alloc(Inode, self.superblock.inodes_per_group);","class":"lineCov","hits":"1","order":"805","possible_hits":"1",},
{"lineNum":"  947","line":"    errdefer self.gpa.free(i_table);"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"    const first = group_id * self.superblock.blocks_per_group * self.block_size;","class":"lineCov","hits":"1","order":"806","possible_hits":"1",},
{"lineNum":"  950","line":"    const offset = first + (self.bg_desc_table[group_id].inode_table % self.superblock.blocks_per_group) * self.block_size;","class":"lineCov","hits":"1","order":"807","possible_hits":"1",},
{"lineNum":"  951","line":"    try self.reader.seek_to(offset);","class":"lineCov","hits":"1","order":"808","possible_hits":"1",},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"    // TODO: maybe this can be somehow optimized, or maybe we shouldn\'t do this at all and"},
{"lineNum":"  954","line":"    // instead parse each Inode on demand."},
{"lineNum":"  955","line":"    for (0..self.superblock.inodes_per_group) |inode_id| {","class":"lineCov","hits":"3","order":"809","possible_hits":"3",},
{"lineNum":"  956","line":"        const dest = std.mem.asBytes(&i_table[inode_id]);","class":"lineCov","hits":"3","order":"810","possible_hits":"3",},
{"lineNum":"  957","line":"        const read = try self.reader.read(dest);","class":"lineCov","hits":"1","order":"811","possible_hits":"1",},
{"lineNum":"  958","line":"        assert(read == dest.len);","class":"lineCov","hits":"1","order":"812","possible_hits":"1",},
{"lineNum":"  959","line":"        try self.reader.seek_by(self.superblock.inode_size - @as(u16, @intCast(read)));","class":"linePartCov","hits":"1","order":"813","possible_hits":"2",},
{"lineNum":"  960","line":"    }","class":"lineCov","hits":"3","order":"814","possible_hits":"3",},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"    return i_table;","class":"lineCov","hits":"1","order":"815","possible_hits":"1",},
{"lineNum":"  963","line":"}"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"fn get_inode(self: *EXT2, inode_id: u32) !Inode {","class":"lineCov","hits":"2","order":"793","possible_hits":"2",},
{"lineNum":"  966","line":"    const group_id = self.inode_tables.get_group_id_containing_inode_id(inode_id);","class":"lineCov","hits":"1","order":"794","possible_hits":"1",},
{"lineNum":"  967","line":"    if (!self.inode_tables.has_group_filled(group_id)) {","class":"lineCov","hits":"1","order":"799","possible_hits":"1",},
{"lineNum":"  968","line":"        const inode_table = try self.get_inode_table(group_id);","class":"linePartCov","hits":"1","order":"802","possible_hits":"2",},
{"lineNum":"  969","line":"        errdefer self.gpa.free(inode_table);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  970","line":""},
{"lineNum":"  971","line":"        try self.inode_tables.fill_for_group(group_id, inode_table);","class":"linePartCov","hits":"2","order":"816","possible_hits":"3",},
{"lineNum":"  972","line":"    }"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"    return self.inode_tables.get_inode(inode_id);","class":"lineCov","hits":"1","order":"822","possible_hits":"1",},
{"lineNum":"  975","line":"}"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"/// Caller owns and must free the returned memory. Asserts that passed inode is a dir."},
{"lineNum":"  978","line":"fn read_dir_entries_with_inode_id(self: *EXT2, dir_inode_id: u32) ![]DirEntry {","class":"lineCov","hits":"2","order":"856","possible_hits":"2",},
{"lineNum":"  979","line":"    const inode = try self.get_inode(dir_inode_id);","class":"lineCov","hits":"1","order":"857","possible_hits":"1",},
{"lineNum":"  980","line":"    assert(inode.is_dir());","class":"lineCov","hits":"1","order":"858","possible_hits":"1",},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"    const entries = try self.read_dir_entries_with_inode(inode);","class":"lineCov","hits":"1","order":"861","possible_hits":"1",},
{"lineNum":"  983","line":"    errdefer DirEntry.free_entries(self.gpa, entries);"},
{"lineNum":"  984","line":"    return entries;","class":"lineCov","hits":"1","order":"914","possible_hits":"1",},
{"lineNum":"  985","line":"}"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"/// Caller owns and must free the returned memory. Asserts that passed inode is a dir."},
{"lineNum":"  988","line":"fn read_dir_entries_with_inode(self: *EXT2, dir_inode: Inode) ![]DirEntry {","class":"lineCov","hits":"2","order":"862","possible_hits":"2",},
{"lineNum":"  989","line":"    return self.read_dir_entries_with_inode_dot_dirs(dir_inode, true);","class":"lineCov","hits":"1","order":"863","possible_hits":"1",},
{"lineNum":"  990","line":"}"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"const EntriesList = std.ArrayList(DirEntry);"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"/// Caller owns and must free the returned memory. Asserts that passed inode is a dir."},
{"lineNum":"  995","line":"fn read_dir_entries_with_inode_dot_dirs(self: *EXT2, dir_inode: Inode, with_dot_dirs: bool) ![]DirEntry {","class":"lineCov","hits":"2","order":"864","possible_hits":"2",},
{"lineNum":"  996","line":"    assert(dir_inode.is_dir());","class":"lineCov","hits":"1","order":"865","possible_hits":"1",},
{"lineNum":"  997","line":"    var entries = EntriesList.init(self.gpa);","class":"lineCov","hits":"1","order":"866","possible_hits":"1",},
{"lineNum":"  998","line":"    errdefer entries.deinit();","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"    const max_direct_blocks = 12;","class":"lineCov","hits":"1","order":"867","possible_hits":"1",},
{"lineNum":" 1001","line":"    for (dir_inode.block[0..max_direct_blocks]) |block_id| {","class":"lineCov","hits":"3","order":"868","possible_hits":"3",},
{"lineNum":" 1002","line":"        if (block_id == 0) continue;","class":"lineCov","hits":"2","order":"869","possible_hits":"2",},
{"lineNum":" 1003","line":"        try self.read_dir_entries_from_block(block_id, &entries, with_dot_dirs);","class":"linePartCov","hits":"1","order":"870","possible_hits":"2",},
{"lineNum":" 1004","line":"    }","class":"lineCov","hits":"3","order":"909","possible_hits":"3",},
{"lineNum":" 1005","line":""},
{"lineNum":" 1006","line":"    if (dir_inode.block[12] != 0) try self.read_dir_entries_from_singly_indirect_block(dir_inode.block[12], &entries, with_dot_dirs);","class":"linePartCov","hits":"1","order":"910","possible_hits":"3",},
{"lineNum":" 1007","line":"    if (dir_inode.block[13] != 0) try self.read_dir_entries_from_doubly_indirect_block(dir_inode.block[13], &entries, with_dot_dirs);","class":"linePartCov","hits":"1","order":"911","possible_hits":"3",},
{"lineNum":" 1008","line":"    if (dir_inode.block[14] != 0) try self.read_dir_entries_from_triply_indirect_block(dir_inode.block[14], &entries, with_dot_dirs);","class":"linePartCov","hits":"1","order":"912","possible_hits":"3",},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"    return entries.toOwnedSlice();","class":"linePartCov","hits":"2","order":"913","possible_hits":"3",},
{"lineNum":" 1011","line":"}"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"fn read_dir_entries_from_block(self: *EXT2, block_id: u32, entries: *EntriesList, with_dot_dirs: bool) !void {","class":"lineCov","hits":"2","order":"871","possible_hits":"2",},
{"lineNum":" 1014","line":"    var offset = self.block_offset(block_id);","class":"lineCov","hits":"1","order":"872","possible_hits":"1",},
{"lineNum":" 1015","line":"    const block_end_offset = offset + self.block_size;","class":"lineCov","hits":"1","order":"875","possible_hits":"1",},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"    while (offset < block_end_offset) {","class":"lineCov","hits":"1","order":"876","possible_hits":"1",},
{"lineNum":" 1018","line":"        try self.reader.seek_to(offset);","class":"lineCov","hits":"1","order":"877","possible_hits":"1",},
{"lineNum":" 1019","line":"        const entry = try DirEntry.init(self.gpa, &self.reader);","class":"linePartCov","hits":"1","order":"878","possible_hits":"2",},
{"lineNum":" 1020","line":"        errdefer entry.deinit(self.gpa);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"        if (entry.inode_id == 0) {","class":"lineCov","hits":"1","order":"903","possible_hits":"1",},
{"lineNum":" 1023","line":"            entry.deinit(self.gpa);","class":"lineCov","hits":"1","order":"951","possible_hits":"1",},
{"lineNum":" 1024","line":"        } else if (!with_dot_dirs and (std.mem.eql(u8, entry.name, \".\") or std.mem.eql(u8, entry.name, \"..\"))) {","class":"lineCov","hits":"2","order":"904","possible_hits":"2",},
{"lineNum":" 1025","line":"            entry.deinit(self.gpa);","class":"lineCov","hits":"1","order":"935","possible_hits":"1",},
{"lineNum":" 1026","line":"        } else {"},
{"lineNum":" 1027","line":"            try entries.append(entry);","class":"linePartCov","hits":"2","order":"905","possible_hits":"3",},
{"lineNum":" 1028","line":"        }"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"        offset += entry.rec_len;","class":"linePartCov","hits":"1","order":"906","possible_hits":"2",},
{"lineNum":" 1031","line":"        if (entry.rec_len == 0 or offset >= block_end_offset) break;","class":"lineCov","hits":"2","order":"907","possible_hits":"2",},
{"lineNum":" 1032","line":"    }","class":"linePartCov","hits":"3","order":"908","possible_hits":"4",},
{"lineNum":" 1033","line":"}"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"fn read_dir_entries_from_singly_indirect_block(self: *EXT2, indirect_block_id: u32, entries: *EntriesList, with_dot_dirs: bool) !void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1036","line":"    const block_ptrs_per_block = self.block_size / @sizeOf(u32);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1037","line":"    const block_ptrs = try self.gpa.alloc(u32, block_ptrs_per_block);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1038","line":"    defer self.gpa.free(block_ptrs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1039","line":""},
{"lineNum":" 1040","line":"    const indirect_offset = self.block_offset(indirect_block_id);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1041","line":"    try self.reader.seek_to(indirect_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1042","line":"    const bytes = @as([*]u8, @ptrCast(block_ptrs.ptr))[0..block_ptrs.len * @sizeOf(u32)];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1043","line":"    _ = try self.reader.read(bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"    for (block_ptrs) |block_id| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1046","line":"        if (block_id == 0) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1047","line":"        try self.read_dir_entries_from_block(block_id, entries, with_dot_dirs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1048","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1049","line":"}"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"fn read_dir_entries_from_doubly_indirect_block(self: *EXT2, double_indirect_block_id: u32, entries: *EntriesList, with_dot_dirs: bool) !void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1052","line":"    const block_ptrs_per_block = self.block_size / @sizeOf(u32);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1053","line":"    const block_ptrs = try self.gpa.alloc(u32, block_ptrs_per_block);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1054","line":"    defer self.gpa.free(block_ptrs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"    const double_indirect_offset = self.block_offset(double_indirect_block_id);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1057","line":"    try self.reader.seek_to(double_indirect_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1058","line":"    const bytes = @as([*]u8, @ptrCast(block_ptrs.ptr))[0..block_ptrs.len * @sizeOf(u32)];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1059","line":"    _ = try self.reader.read(bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"    for (block_ptrs) |indirect_block_id| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1062","line":"        if (indirect_block_id == 0) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1063","line":"        try self.read_dir_entries_from_singly_indirect_block(indirect_block_id, entries, with_dot_dirs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1064","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1065","line":"}"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"fn read_dir_entries_from_triply_indirect_block(self: *EXT2, triple_indirect_block_id: u32, entries: *EntriesList, with_dot_dirs: bool) !void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1068","line":"    const block_ptrs_per_block = self.block_size / @sizeOf(u32);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1069","line":"    const block_ptrs = try self.gpa.alloc(u32, block_ptrs_per_block);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1070","line":"    defer self.gpa.free(block_ptrs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1071","line":""},
{"lineNum":" 1072","line":"    const triple_indirect_offset = self.block_offset(triple_indirect_block_id);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1073","line":"    try self.reader.seek_to(triple_indirect_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1074","line":"    const bytes = @as([*]u8, @ptrCast(block_ptrs.ptr))[0..block_ptrs.len * @sizeOf(u32)];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1075","line":"    _ = try self.reader.read(bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1076","line":""},
{"lineNum":" 1077","line":"    for (block_ptrs) |double_indirect_block_id| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1078","line":"        if (double_indirect_block_id == 0) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1079","line":"        try self.read_dir_entries_from_doubly_indirect_block(double_indirect_block_id, entries, with_dot_dirs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1080","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1081","line":"}"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"/// Caller owns and must free the returned memory."},
{"lineNum":" 1084","line":"fn read_dir_entries_recursively_for_inode_id(self: *EXT2, inode_id: u32) ![]DirEntry {","class":"lineCov","hits":"2","order":"931","possible_hits":"2",},
{"lineNum":" 1085","line":"    const inode = try self.get_inode(inode_id);","class":"lineCov","hits":"1","order":"932","possible_hits":"1",},
{"lineNum":" 1086","line":"    if (!inode.is_dir()) return try self.gpa.alloc(DirEntry, 0);","class":"linePartCov","hits":"1","order":"933","possible_hits":"2",},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"    const root_entries = try self.read_dir_entries_with_inode_dot_dirs(inode, false);","class":"linePartCov","hits":"1","order":"934","possible_hits":"2",},
{"lineNum":" 1089","line":"    var entries = EntriesList.fromOwnedSlice(self.gpa, root_entries);","class":"lineCov","hits":"1","order":"936","possible_hits":"1",},
{"lineNum":" 1090","line":"    errdefer entries.deinit();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"    var last_loop_entries = entries.items;","class":"lineCov","hits":"1","order":"937","possible_hits":"1",},
{"lineNum":" 1093","line":"    while (dir_entries_contain_directory(last_loop_entries)) {","class":"lineCov","hits":"1","order":"938","possible_hits":"1",},
{"lineNum":" 1094","line":"        var loop_entries = EntriesList.init(self.gpa);","class":"lineCov","hits":"1","order":"945","possible_hits":"1",},
{"lineNum":" 1095","line":"        errdefer for (loop_entries.items) |e| e.deinit(self.gpa);","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":" 1096","line":"        errdefer loop_entries.deinit();","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"        for (last_loop_entries) |e| {","class":"lineCov","hits":"3","order":"946","possible_hits":"3",},
{"lineNum":" 1099","line":"            if (!e.is_dir()) continue;","class":"linePartCov","hits":"1","order":"947","possible_hits":"2",},
{"lineNum":" 1100","line":"            if (std.mem.eql(u8, e.name, \".\") or std.mem.eql(u8, e.name, \"..\")) continue;","class":"lineCov","hits":"2","order":"948","possible_hits":"2",},
{"lineNum":" 1101","line":"            const dir_inode = try self.get_inode(e.inode_id);","class":"linePartCov","hits":"2","order":"949","possible_hits":"4",},
{"lineNum":" 1102","line":"            const dir_entries = try self.read_dir_entries_with_inode_dot_dirs(dir_inode, false);","class":"linePartCov","hits":"2","order":"950","possible_hits":"4",},
{"lineNum":" 1103","line":"            errdefer DirEntry.free_entries(self.gpa, dir_entries);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1104","line":"            defer self.gpa.free(dir_entries);","class":"linePartCov","hits":"1","order":"953","possible_hits":"2",},
{"lineNum":" 1105","line":"            try loop_entries.appendSlice(dir_entries);","class":"linePartCov","hits":"1","order":"952","possible_hits":"2",},
{"lineNum":" 1106","line":"        }","class":"lineCov","hits":"3","order":"954","possible_hits":"3",},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"        const curr_loop_entries = try loop_entries.toOwnedSlice();","class":"linePartCov","hits":"2","order":"955","possible_hits":"4",},
{"lineNum":" 1109","line":"        defer self.gpa.free(curr_loop_entries);","class":"linePartCov","hits":"1","order":"959","possible_hits":"2",},
{"lineNum":" 1110","line":"        const idx_start_last_loop_entries = entries.items.len;","class":"lineCov","hits":"1","order":"956","possible_hits":"1",},
{"lineNum":" 1111","line":"        try entries.appendSlice(curr_loop_entries);","class":"linePartCov","hits":"1","order":"957","possible_hits":"2",},
{"lineNum":" 1112","line":"        last_loop_entries = entries.items[idx_start_last_loop_entries..entries.items.len];","class":"lineCov","hits":"3","order":"958","possible_hits":"3",},
{"lineNum":" 1113","line":"    }","class":"lineCov","hits":"3","order":"960","possible_hits":"3",},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"    return try entries.toOwnedSlice();","class":"linePartCov","hits":"1","order":"963","possible_hits":"3",},
{"lineNum":" 1116","line":"}"},
{"lineNum":" 1117","line":""},
{"lineNum":" 1118","line":"/// Doesn\'t consider \".\" and \"..\" as a directory."},
{"lineNum":" 1119","line":"fn dir_entries_contain_directory(entries: []DirEntry) bool {","class":"lineCov","hits":"2","order":"939","possible_hits":"2",},
{"lineNum":" 1120","line":"    for (entries) |e| {","class":"lineCov","hits":"3","order":"940","possible_hits":"3",},
{"lineNum":" 1121","line":"        if (e.is_dir() and !std.mem.eql(u8, e.name, \".\") and !std.mem.eql(u8, e.name, \"..\"))","class":"lineCov","hits":"2","order":"941","possible_hits":"2",},
{"lineNum":" 1122","line":"            return true;","class":"lineCov","hits":"1","order":"944","possible_hits":"1",},
{"lineNum":" 1123","line":"    }","class":"lineCov","hits":"2","order":"961","possible_hits":"2",},
{"lineNum":" 1124","line":"    return false;","class":"lineCov","hits":"1","order":"962","possible_hits":"1",},
{"lineNum":" 1125","line":"}"},
{"lineNum":" 1126","line":""},
{"lineNum":" 1127","line":"fn count_bits_on(bytes: []u8) u32 {","class":"lineCov","hits":"2","order":"783","possible_hits":"2",},
{"lineNum":" 1128","line":"    var count: u32 = 0;","class":"lineCov","hits":"1","order":"784","possible_hits":"1",},
{"lineNum":" 1129","line":"    for (bytes) |b| count += @popCount(b);","class":"lineCov","hits":"2","order":"785","possible_hits":"2",},
{"lineNum":" 1130","line":"    return count;","class":"lineCov","hits":"1","order":"786","possible_hits":"1",},
{"lineNum":" 1131","line":"}"},
{"lineNum":" 1132","line":""},
{"lineNum":" 1133","line":"/// Reads the data of a file from its inode."},
{"lineNum":" 1134","line":"/// Caller owns the returned memory and must free it."},
{"lineNum":" 1135","line":"pub fn read_file_data(self: *EXT2, inode_id: u32) ![]u8 {","class":"lineCov","hits":"2","order":"1033","possible_hits":"2",},
{"lineNum":" 1136","line":"    const inode = try self.get_inode(inode_id);","class":"lineCov","hits":"1","order":"1034","possible_hits":"1",},
{"lineNum":" 1137","line":"    return try self.read_file_data_from_inode(inode);","class":"lineCov","hits":"1","order":"1035","possible_hits":"1",},
{"lineNum":" 1138","line":"}"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"/// Reads the data of a file from its inode."},
{"lineNum":" 1141","line":"/// Caller owns the returned memory and must free it."},
{"lineNum":" 1142","line":"pub fn read_file_data_from_inode(self: *EXT2, inode: Inode) ![]u8 {","class":"lineCov","hits":"2","order":"1036","possible_hits":"2",},
{"lineNum":" 1143","line":"    if (inode.is_dir()) return error.IsDirectory;","class":"linePartCov","hits":"1","order":"1037","possible_hits":"2",},
{"lineNum":" 1144","line":"    if (inode.size == 0) return try self.gpa.alloc(u8, 0);","class":"linePartCov","hits":"1","order":"1038","possible_hits":"2",},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"    const data = try self.gpa.alloc(u8, inode.size);","class":"linePartCov","hits":"1","order":"1039","possible_hits":"2",},
{"lineNum":" 1147","line":"    errdefer self.gpa.free(data);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1148","line":""},
{"lineNum":" 1149","line":"    var bytes_read: u32 = 0;","class":"lineCov","hits":"1","order":"1040","possible_hits":"1",},
{"lineNum":" 1150","line":"    const max_direct_blocks = 12;","class":"lineCov","hits":"1","order":"1041","possible_hits":"1",},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"    for (inode.block[0..max_direct_blocks]) |block_id| {","class":"lineCov","hits":"3","order":"1042","possible_hits":"3",},
{"lineNum":" 1153","line":"        if (block_id == 0 or bytes_read >= inode.size) break;","class":"lineCov","hits":"2","order":"1043","possible_hits":"2",},
{"lineNum":" 1154","line":"        try self.read_data_block(block_id, data, &bytes_read);","class":"lineCov","hits":"1","order":"1044","possible_hits":"1",},
{"lineNum":" 1155","line":"    }","class":"lineCov","hits":"3","order":"1054","possible_hits":"3",},
{"lineNum":" 1156","line":""},
{"lineNum":" 1157","line":"    if (bytes_read < inode.size and inode.block[12] != 0) {","class":"lineCov","hits":"2","order":"1055","possible_hits":"2",},
{"lineNum":" 1158","line":"        try self.read_indirect_blocks(inode.block[12], data, &bytes_read);","class":"linePartCov","hits":"1","order":"1056","possible_hits":"2",},
{"lineNum":" 1159","line":"    }"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"    if (bytes_read < inode.size and inode.block[13] != 0) {","class":"lineCov","hits":"2","order":"1070","possible_hits":"2",},
{"lineNum":" 1162","line":"        try self.read_double_indirect_blocks(inode.block[13], data, &bytes_read);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1163","line":"    }"},
{"lineNum":" 1164","line":""},
{"lineNum":" 1165","line":"    if (bytes_read < inode.size and inode.block[14] != 0) {","class":"lineCov","hits":"2","order":"1071","possible_hits":"2",},
{"lineNum":" 1166","line":"        try self.read_triple_indirect_blocks(inode.block[14], data, &bytes_read);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1167","line":"    }"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"    if (bytes_read < inode.size) {","class":"lineCov","hits":"1","order":"1072","possible_hits":"1",},
{"lineNum":" 1170","line":"        return try self.gpa.realloc(data, bytes_read);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1171","line":"    }"},
{"lineNum":" 1172","line":""},
{"lineNum":" 1173","line":"    return data;","class":"lineCov","hits":"1","order":"1073","possible_hits":"1",},
{"lineNum":" 1174","line":"}"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"/// Reads data from a single block into the buffer."},
{"lineNum":" 1177","line":"fn read_data_block(self: *EXT2, block_id: u32, buffer: []u8, bytes_read: *u32) !void {","class":"lineCov","hits":"2","order":"1045","possible_hits":"2",},
{"lineNum":" 1178","line":"    if (block_id == 0) return;","class":"linePartCov","hits":"1","order":"1046","possible_hits":"2",},
{"lineNum":" 1179","line":""},
{"lineNum":" 1180","line":"    if (bytes_read.* >= buffer.len) return;","class":"linePartCov","hits":"1","order":"1047","possible_hits":"2",},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"    const offset = self.block_offset(block_id);","class":"lineCov","hits":"1","order":"1048","possible_hits":"1",},
{"lineNum":" 1183","line":"    try self.reader.seek_to(offset);","class":"lineCov","hits":"1","order":"1049","possible_hits":"1",},
{"lineNum":" 1184","line":""},
{"lineNum":" 1185","line":"    const remain_in_buffer: u32 = @intCast(buffer.len - bytes_read.*);","class":"linePartCov","hits":"1","order":"1050","possible_hits":"2",},
{"lineNum":" 1186","line":"    const to_read = @min(remain_in_buffer, self.block_size);","class":"lineCov","hits":"1","order":"1051","possible_hits":"1",},
{"lineNum":" 1187","line":""},
{"lineNum":" 1188","line":"    const read = try self.reader.read(buffer[bytes_read.*..][0..to_read]);","class":"lineCov","hits":"2","order":"1052","possible_hits":"2",},
{"lineNum":" 1189","line":"    bytes_read.* += @intCast(read);","class":"linePartCov","hits":"1","order":"1053","possible_hits":"2",},
{"lineNum":" 1190","line":"}"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"/// Reads data from indirect blocks into the buffer."},
{"lineNum":" 1193","line":"fn read_indirect_blocks(self: *EXT2, indirect_block_id: u32, buffer: []u8, bytes_read: *u32) !void {","class":"lineCov","hits":"2","order":"1057","possible_hits":"2",},
{"lineNum":" 1194","line":"    if (indirect_block_id == 0 or bytes_read.* >= buffer.len) return;","class":"lineCov","hits":"2","order":"1058","possible_hits":"2",},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"    const block_ptrs_per_block = self.block_size / @sizeOf(u32);","class":"lineCov","hits":"1","order":"1059","possible_hits":"1",},
{"lineNum":" 1197","line":"    const block_ptrs = try self.gpa.alloc(u32, block_ptrs_per_block);","class":"linePartCov","hits":"1","order":"1060","possible_hits":"2",},
{"lineNum":" 1198","line":"    defer self.gpa.free(block_ptrs);","class":"lineCov","hits":"1","order":"1069","possible_hits":"1",},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"    const indirect_offset = self.block_offset(indirect_block_id);","class":"lineCov","hits":"1","order":"1061","possible_hits":"1",},
{"lineNum":" 1201","line":"    try self.reader.seek_to(indirect_offset);","class":"lineCov","hits":"1","order":"1062","possible_hits":"1",},
{"lineNum":" 1202","line":"    const bytes = @as([*]u8, @ptrCast(block_ptrs.ptr))[0..block_ptrs.len * @sizeOf(u32)];","class":"lineCov","hits":"2","order":"1063","possible_hits":"2",},
{"lineNum":" 1203","line":"    _ = try self.reader.read(bytes);","class":"lineCov","hits":"1","order":"1064","possible_hits":"1",},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"    for (block_ptrs) |block_id| {","class":"lineCov","hits":"3","order":"1065","possible_hits":"3",},
{"lineNum":" 1206","line":"        if (block_id == 0 or bytes_read.* >= buffer.len) break;","class":"lineCov","hits":"2","order":"1066","possible_hits":"2",},
{"lineNum":" 1207","line":"        try self.read_data_block(block_id, buffer, bytes_read);","class":"lineCov","hits":"1","order":"1067","possible_hits":"1",},
{"lineNum":" 1208","line":"    }","class":"linePartCov","hits":"2","order":"1068","possible_hits":"3",},
{"lineNum":" 1209","line":"}"},
{"lineNum":" 1210","line":""},
{"lineNum":" 1211","line":"/// Reads data from double indirect blocks into the buffer."},
{"lineNum":" 1212","line":"fn read_double_indirect_blocks(self: *EXT2, double_indirect_block_id: u32, buffer: []u8, bytes_read: *u32) !void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1213","line":"    if (double_indirect_block_id == 0 or bytes_read.* >= buffer.len) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1214","line":""},
{"lineNum":" 1215","line":"    const block_ptrs_per_block = self.block_size / @sizeOf(u32);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1216","line":"    const block_ptrs = try self.gpa.alloc(u32, block_ptrs_per_block);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1217","line":"    defer self.gpa.free(block_ptrs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"    const double_indirect_offset = self.block_offset(double_indirect_block_id);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1220","line":"    try self.reader.seek_to(double_indirect_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1221","line":"    const bytes = @as([*]u8, @ptrCast(block_ptrs.ptr))[0..block_ptrs.len * @sizeOf(u32)];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1222","line":"    _ = try self.reader.read(bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"    for (block_ptrs) |indirect_block_id| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1225","line":"        if (indirect_block_id == 0 or bytes_read.* >= buffer.len) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1226","line":"        try self.read_indirect_blocks(indirect_block_id, buffer, bytes_read);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1227","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1228","line":"}"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"/// Reads data from triple indirect blocks into the buffer."},
{"lineNum":" 1231","line":"fn read_triple_indirect_blocks(self: *EXT2, triple_indirect_block_id: u32, buffer: []u8, bytes_read: *u32) !void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1232","line":"    if (triple_indirect_block_id == 0 or bytes_read.* >= buffer.len) return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1233","line":""},
{"lineNum":" 1234","line":"    const block_ptrs_per_block = self.block_size / @sizeOf(u32);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1235","line":"    const block_ptrs = try self.gpa.alloc(u32, block_ptrs_per_block);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1236","line":"    defer self.gpa.free(block_ptrs);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"    const triple_indirect_offset = self.block_offset(triple_indirect_block_id);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1239","line":"    try self.reader.seek_to(triple_indirect_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1240","line":"    const bytes = @as([*]u8, @ptrCast(block_ptrs.ptr))[0..block_ptrs.len * @sizeOf(u32)];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1241","line":"    _ = try self.reader.read(bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1242","line":""},
{"lineNum":" 1243","line":"    for (block_ptrs) |double_indirect_block_id| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1244","line":"        if (double_indirect_block_id == 0 or bytes_read.* >= buffer.len) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1245","line":"        try self.read_double_indirect_blocks(double_indirect_block_id, buffer, bytes_read);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1246","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1247","line":"}"},
{"lineNum":" 1248","line":""},
{"lineNum":" 1249","line":"test {","class":"lineCov","hits":"1","order":"71","possible_hits":"1",},
{"lineNum":" 1250","line":"    std.testing.refAllDecls(Tests);","class":"lineCov","hits":"1","order":"72","possible_hits":"1",},
{"lineNum":" 1251","line":"}"},
{"lineNum":" 1252","line":""},
{"lineNum":" 1253","line":"const Tests = struct {"},
{"lineNum":" 1254","line":"    const FilesystemHandler = lib.FilesystemHandler;"},
{"lineNum":" 1255","line":"    const utils = @import(\"testing_utils.zig\");"},
{"lineNum":" 1256","line":"    const project_t_utils = @import(\"../testing_utils.zig\");"},
{"lineNum":" 1257","line":"    const EXT2_PATH = \"./filesystems/ext2_filesystem.img\";"},
{"lineNum":" 1258","line":"    const t = std.testing;"},
{"lineNum":" 1259","line":"    const t_alloc = t.allocator;"},
{"lineNum":" 1260","line":"    const tlog = std.log.scoped(.ext2_tests);"},
{"lineNum":" 1261","line":""},
{"lineNum":" 1262","line":"    fn create_ext2() !EXT2 {","class":"lineCov","hits":"1","order":"669","possible_hits":"1",},
{"lineNum":" 1263","line":"        const f = try std.fs.cwd().openFile(EXT2_PATH, .{});","class":"lineCov","hits":"1","order":"670","possible_hits":"1",},
{"lineNum":" 1264","line":"        var reader = try Reader.init(&f);","class":"lineCov","hits":"1","order":"671","possible_hits":"1",},
{"lineNum":" 1265","line":"        errdefer reader.deinit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1266","line":"        return try .init(t_alloc, &reader);","class":"linePartCov","hits":"1","order":"672","possible_hits":"2",},
{"lineNum":" 1267","line":"    }"},
{"lineNum":" 1268","line":""},
{"lineNum":" 1269","line":"    fn parse_cstr(cstr_slice: []const u8) []const u8 {","class":"lineCov","hits":"2","order":"709","possible_hits":"2",},
{"lineNum":" 1270","line":"        for (cstr_slice, 0..) |c, c_idx| {","class":"lineCov","hits":"3","order":"710","possible_hits":"3",},
{"lineNum":" 1271","line":"            if (c == 0) return cstr_slice[0..c_idx];","class":"lineCov","hits":"2","order":"711","possible_hits":"2",},
{"lineNum":" 1272","line":"        }","class":"linePartCov","hits":"1","order":"712","possible_hits":"2",},
{"lineNum":" 1273","line":"        return \"\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1274","line":"    }"},
{"lineNum":" 1275","line":""},
{"lineNum":" 1276","line":"    test \"has superblock at SuperblockOffset\" {","class":"lineCov","hits":"1","order":"667","possible_hits":"1",},
{"lineNum":" 1277","line":"        const ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"668","possible_hits":"1",},
{"lineNum":" 1278","line":"        defer ext2.deinit();","class":"linePartCov","hits":"1","order":"714","possible_hits":"5",},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"        try t.expectEqual(0xef53, ext2.superblock.magic);","class":"linePartCov","hits":"2","order":"704","possible_hits":"3",},
{"lineNum":" 1281","line":"        try t.expectEqual(64000, ext2.superblock.inodes_count);","class":"linePartCov","hits":"2","order":"705","possible_hits":"3",},
{"lineNum":" 1282","line":"        try t.expectEqual(4096, ext2.superblock.block_size());","class":"linePartCov","hits":"2","order":"706","possible_hits":"3",},
{"lineNum":" 1283","line":"        const expected_ending = \"zrec/mnt\";","class":"lineCov","hits":"1","order":"707","possible_hits":"1",},
{"lineNum":" 1284","line":"        const last_mounted = parse_cstr(&ext2.superblock.last_mounted);","class":"lineCov","hits":"1","order":"708","possible_hits":"1",},
{"lineNum":" 1285","line":"        try t.expectEqualSlices(u8, expected_ending, last_mounted[last_mounted.len-expected_ending.len..]);","class":"linePartCov","hits":"1","order":"713","possible_hits":"2",},
{"lineNum":" 1286","line":"    }"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"    fn expectEqualSuperblock(expected: *Superblock, actual: *Superblock) error{TestExpectedEqual}!void {","class":"lineCov","hits":"2","order":"755","possible_hits":"2",},
{"lineNum":" 1289","line":"        inline for(std.meta.fields(@TypeOf(expected.*))) |f| {"},
{"lineNum":" 1290","line":"            comptime if (std.mem.eql(u8, f.name, \"block_group_nr\")) continue;"},
{"lineNum":" 1291","line":"            try t.expectEqualDeep(@field(expected, f.name), @field(actual, f.name));","class":"lineCov","hits":"48","order":"756","possible_hits":"48",},
{"lineNum":" 1292","line":"        }","class":"lineCov","hits":"1","order":"757","possible_hits":"1",},
{"lineNum":" 1293","line":"    }"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"    test \"has copies of the superblock and block group descriptor table\" {","class":"lineCov","hits":"1","order":"725","possible_hits":"1",},
{"lineNum":" 1296","line":"        var ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"726","possible_hits":"1",},
{"lineNum":" 1297","line":"        defer ext2.deinit();","class":"linePartCov","hits":"1","order":"763","possible_hits":"7",},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"        const superblock = try parse_superblock_at_offset(ext2.gpa, &ext2.reader, ext2.block_group_offset(1));","class":"linePartCov","hits":"1","order":"727","possible_hits":"2",},
{"lineNum":" 1300","line":"        defer ext2.gpa.destroy(superblock);","class":"linePartCov","hits":"1","order":"762","possible_hits":"6",},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"        const bg_desc_table = try parse_bg_desc_table_at_offset(&ext2, ext2.block_group_desc_table_offset(1));","class":"linePartCov","hits":"1","order":"731","possible_hits":"2",},
{"lineNum":" 1303","line":"        defer ext2.gpa.free(bg_desc_table);","class":"linePartCov","hits":"1","order":"761","possible_hits":"5",},
{"lineNum":" 1304","line":""},
{"lineNum":" 1305","line":"        for (2..ext2.n_groups + 1) |idx| {","class":"linePartCov","hits":"3","order":"734","possible_hits":"4",},
{"lineNum":" 1306","line":"            if (!ext2.is_backup_block_group(idx)) continue;","class":"lineCov","hits":"2","order":"735","possible_hits":"2",},
{"lineNum":" 1307","line":""},
{"lineNum":" 1308","line":"            const superblock_offset = ext2.block_group_offset(idx);","class":"lineCov","hits":"1","order":"750","possible_hits":"1",},
{"lineNum":" 1309","line":"            const copy_superblock = try parse_superblock_at_offset(ext2.gpa, &ext2.reader, superblock_offset);","class":"linePartCov","hits":"1","order":"751","possible_hits":"3",},
{"lineNum":" 1310","line":"            defer ext2.gpa.destroy(copy_superblock);","class":"linePartCov","hits":"1","order":"760","possible_hits":"4",},
{"lineNum":" 1311","line":""},
{"lineNum":" 1312","line":"            const bg_desc_table_offset = ext2.block_group_desc_table_offset(idx);","class":"lineCov","hits":"1","order":"752","possible_hits":"1",},
{"lineNum":" 1313","line":"            const copy_bg_desc_table = try parse_bg_desc_table_at_offset(&ext2, bg_desc_table_offset);","class":"linePartCov","hits":"1","order":"753","possible_hits":"2",},
{"lineNum":" 1314","line":"            defer ext2.gpa.free(copy_bg_desc_table);","class":"linePartCov","hits":"1","order":"759","possible_hits":"3",},
{"lineNum":" 1315","line":""},
{"lineNum":" 1316","line":"            try expectEqualSuperblock(superblock, copy_superblock);","class":"linePartCov","hits":"1","order":"754","possible_hits":"2",},
{"lineNum":" 1317","line":"            try t.expectEqualSlices(BlockGroupDescriptor, bg_desc_table, copy_bg_desc_table);","class":"linePartCov","hits":"1","order":"758","possible_hits":"2",},
{"lineNum":" 1318","line":"        }","class":"lineCov","hits":"3","order":"747","possible_hits":"3",},
{"lineNum":" 1319","line":"    }"},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"    test \"block descriptor group table starts at the first block after superblock\" {","class":"lineCov","hits":"1","order":"764","possible_hits":"1",},
{"lineNum":" 1322","line":"        const ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"765","possible_hits":"1",},
{"lineNum":" 1323","line":"        defer ext2.deinit();","class":"linePartCov","hits":"1","order":"769","possible_hits":"3",},
{"lineNum":" 1324","line":""},
{"lineNum":" 1325","line":"        try t.expectEqual(8, ext2.bg_desc_table.len);","class":"linePartCov","hits":"2","order":"766","possible_hits":"3",},
{"lineNum":" 1326","line":"        try t.expectEqualDeep(","class":"linePartCov","hits":"1","order":"768","possible_hits":"2",},
{"lineNum":" 1327","line":"            BlockGroupDescriptor {"},
{"lineNum":" 1328","line":"                .block_bitmap = 64,"},
{"lineNum":" 1329","line":"                .inode_bitmap = 65,"},
{"lineNum":" 1330","line":"                .inode_table = 66,"},
{"lineNum":" 1331","line":"                .free_blocks_count = 30823,"},
{"lineNum":" 1332","line":"                .free_inodes_count = 7989,"},
{"lineNum":" 1333","line":"                .used_dirs_count = 2,"},
{"lineNum":" 1334","line":"                .__padding = 4,"},
{"lineNum":" 1335","line":"                .__reserved = [_]u8{ 0 } ** 12,"},
{"lineNum":" 1336","line":"            },"},
{"lineNum":" 1337","line":"            ext2.bg_desc_table[0],","class":"lineCov","hits":"2","order":"767","possible_hits":"2",},
{"lineNum":" 1338","line":"        );"},
{"lineNum":" 1339","line":"    }"},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":"    fn get_used_blocks_in_group_dumb(self: *EXT2, group_id: u32) !u32 {","class":"lineCov","hits":"2","order":"776","possible_hits":"2",},
{"lineNum":" 1342","line":"        assert(group_id < self.bg_desc_table.len);","class":"lineCov","hits":"1","order":"777","possible_hits":"1",},
{"lineNum":" 1343","line":"        const block_bitmap_off = self.bg_desc_table[group_id].block_bitmap * self.block_size;","class":"lineCov","hits":"1","order":"778","possible_hits":"1",},
{"lineNum":" 1344","line":"        try self.reader.seek_to(block_bitmap_off);","class":"lineCov","hits":"1","order":"779","possible_hits":"1",},
{"lineNum":" 1345","line":"        const mem = try self.gpa.alloc(u8, self.superblock.blocks_per_group / 8);","class":"lineCov","hits":"1","order":"780","possible_hits":"1",},
{"lineNum":" 1346","line":"        defer self.gpa.free(mem);","class":"lineCov","hits":"1","order":"787","possible_hits":"1",},
{"lineNum":" 1347","line":"        _ = try self.reader.read(mem);","class":"lineCov","hits":"1","order":"781","possible_hits":"1",},
{"lineNum":" 1348","line":"        const used_blocks = count_bits_on(mem);","class":"lineCov","hits":"1","order":"782","possible_hits":"1",},
{"lineNum":" 1349","line":"        return used_blocks;","class":"lineCov","hits":"1","order":"788","possible_hits":"1",},
{"lineNum":" 1350","line":"    }"},
{"lineNum":" 1351","line":""},
{"lineNum":" 1352","line":"    test \"used blocks in group match\" {","class":"lineCov","hits":"1","order":"770","possible_hits":"1",},
{"lineNum":" 1353","line":"        var ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"771","possible_hits":"1",},
{"lineNum":" 1354","line":"        defer ext2.deinit();","class":"linePartCov","hits":"1","order":"789","possible_hits":"3",},
{"lineNum":" 1355","line":""},
{"lineNum":" 1356","line":"        try t.expectEqual(ext2.get_used_blocks_in_group(0), try get_used_blocks_in_group_dumb(&ext2, 0));","class":"linePartCov","hits":"2","order":"772","possible_hits":"4",},
{"lineNum":" 1357","line":"    }"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"    test \"get ROOT_INODE\" {","class":"lineCov","hits":"1","order":"790","possible_hits":"1",},
{"lineNum":" 1360","line":"        var ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"791","possible_hits":"1",},
{"lineNum":" 1361","line":"        defer ext2.deinit();","class":"linePartCov","hits":"1","order":"845","possible_hits":"13",},
{"lineNum":" 1362","line":""},
{"lineNum":" 1363","line":"        const inode = try ext2.get_inode(ROOT_INODE);","class":"linePartCov","hits":"1","order":"792","possible_hits":"2",},
{"lineNum":" 1364","line":"        try t.expectEqual(0o40755, inode.mode.backing_integer());","class":"linePartCov","hits":"2","order":"828","possible_hits":"3",},
{"lineNum":" 1365","line":"        try t.expectEqual(4096, inode.size);","class":"linePartCov","hits":"2","order":"831","possible_hits":"3",},
{"lineNum":" 1366","line":"        try t.expectEqual(5, inode.links_count);","class":"linePartCov","hits":"2","order":"832","possible_hits":"3",},
{"lineNum":" 1367","line":"        try t.expectEqual(8, inode.blocks);","class":"linePartCov","hits":"2","order":"833","possible_hits":"3",},
{"lineNum":" 1368","line":"        try t.expectEqual(0, inode.flags.backing_integer());","class":"linePartCov","hits":"2","order":"834","possible_hits":"3",},
{"lineNum":" 1369","line":"        try t.expectEqualSlices(u32, &[_]u32{ 566 } ++ &[_]u32{ 0 } ** 14, &inode.block);","class":"linePartCov","hits":"1","order":"837","possible_hits":"2",},
{"lineNum":" 1370","line":"        try t.expectEqual(0, inode.generation);","class":"linePartCov","hits":"2","order":"838","possible_hits":"3",},
{"lineNum":" 1371","line":"        try t.expectEqual(0, inode.file_acl);","class":"linePartCov","hits":"2","order":"839","possible_hits":"3",},
{"lineNum":" 1372","line":"        try t.expectEqual(0, inode.dir_acl);","class":"linePartCov","hits":"2","order":"840","possible_hits":"3",},
{"lineNum":" 1373","line":"        try t.expectEqual(0, inode.faddr);","class":"linePartCov","hits":"2","order":"841","possible_hits":"3",},
{"lineNum":" 1374","line":"        try t.expectEqual(0, inode.osd2.backing_integer());","class":"linePartCov","hits":"2","order":"842","possible_hits":"3",},
{"lineNum":" 1375","line":"    }"},
{"lineNum":" 1376","line":""},
{"lineNum":" 1377","line":"    test \"get inode_table\" {","class":"lineCov","hits":"1","order":"847","possible_hits":"1",},
{"lineNum":" 1378","line":"        var ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"848","possible_hits":"1",},
{"lineNum":" 1379","line":"        defer ext2.deinit();","class":"linePartCov","hits":"1","order":"852","possible_hits":"3",},
{"lineNum":" 1380","line":""},
{"lineNum":" 1381","line":"        const inode_table = try ext2.get_inode_table(0);","class":"linePartCov","hits":"1","order":"849","possible_hits":"2",},
{"lineNum":" 1382","line":"        defer ext2.gpa.free(inode_table);","class":"linePartCov","hits":"1","order":"851","possible_hits":"2",},
{"lineNum":" 1383","line":""},
{"lineNum":" 1384","line":"        try t.expectEqual(ext2.superblock.inodes_per_group, inode_table.len);","class":"linePartCov","hits":"2","order":"850","possible_hits":"3",},
{"lineNum":" 1385","line":"    }"},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"    test \"read root dir\" {","class":"lineCov","hits":"1","order":"853","possible_hits":"1",},
{"lineNum":" 1388","line":"        var ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"854","possible_hits":"1",},
{"lineNum":" 1389","line":"        defer ext2.deinit();","class":"linePartCov","hits":"1","order":"927","possible_hits":"4",},
{"lineNum":" 1390","line":""},
{"lineNum":" 1391","line":"        const entries = try ext2.read_dir_entries_with_inode_id(ROOT_INODE);","class":"linePartCov","hits":"1","order":"855","possible_hits":"2",},
{"lineNum":" 1392","line":"        defer DirEntry.free_entries(ext2.gpa, entries);","class":"linePartCov","hits":"1","order":"920","possible_hits":"3",},
{"lineNum":" 1393","line":"        try t.expectEqual(5, entries.len);","class":"linePartCov","hits":"1","order":"915","possible_hits":"2",},
{"lineNum":" 1394","line":"        const expected_names: []const []const u8 = &.{ \".\", \"..\", \"lost+found\", \"jpgs\", \"pngs\" };","class":"lineCov","hits":"1","order":"916","possible_hits":"1",},
{"lineNum":" 1395","line":"        for (expected_names, entries) |expected_name, entry| {","class":"lineCov","hits":"3","order":"917","possible_hits":"3",},
{"lineNum":" 1396","line":"            try t.expectEqualSlices(u8, expected_name, entry.name);","class":"linePartCov","hits":"1","order":"918","possible_hits":"2",},
{"lineNum":" 1397","line":"        }","class":"lineCov","hits":"3","order":"919","possible_hits":"3",},
{"lineNum":" 1398","line":"    }"},
{"lineNum":" 1399","line":""},
{"lineNum":" 1400","line":"    test \"read root dir recursive\" {","class":"lineCov","hits":"1","order":"928","possible_hits":"1",},
{"lineNum":" 1401","line":"        var ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"929","possible_hits":"1",},
{"lineNum":" 1402","line":"        defer ext2.deinit();","class":"linePartCov","hits":"1","order":"970","possible_hits":"4",},
{"lineNum":" 1403","line":""},
{"lineNum":" 1404","line":"        const all_entries = try ext2.read_dir_entries_recursively_for_inode_id(ROOT_INODE);","class":"linePartCov","hits":"1","order":"930","possible_hits":"2",},
{"lineNum":" 1405","line":"        defer DirEntry.free_entries(ext2.gpa, all_entries);","class":"linePartCov","hits":"1","order":"969","possible_hits":"3",},
{"lineNum":" 1406","line":""},
{"lineNum":" 1407","line":"        try t.expectEqual(11, all_entries.len);","class":"linePartCov","hits":"1","order":"964","possible_hits":"2",},
{"lineNum":" 1408","line":"        const expected_names: []const []const u8 = &.{","class":"lineCov","hits":"1","order":"965","possible_hits":"1",},
{"lineNum":" 1409","line":"            \"lost+found\","},
{"lineNum":" 1410","line":"            \"jpgs\","},
{"lineNum":" 1411","line":"            \"pngs\","},
{"lineNum":" 1412","line":"            \"example1.jpg\","},
{"lineNum":" 1413","line":"            \"example2.jpg\","},
{"lineNum":" 1414","line":"            \"example3.jpg\","},
{"lineNum":" 1415","line":"            \"example4.jpg\","},
{"lineNum":" 1416","line":"            \"example1.png\","},
{"lineNum":" 1417","line":"            \"example2.png\","},
{"lineNum":" 1418","line":"            \"example3.png\","},
{"lineNum":" 1419","line":"            \"example4.png\","},
{"lineNum":" 1420","line":"        };"},
{"lineNum":" 1421","line":"        for (expected_names, all_entries) |expected_name, entry| {","class":"lineCov","hits":"3","order":"966","possible_hits":"3",},
{"lineNum":" 1422","line":"            try t.expectEqualSlices(u8, expected_name, entry.name);","class":"linePartCov","hits":"1","order":"967","possible_hits":"2",},
{"lineNum":" 1423","line":"        }","class":"lineCov","hits":"3","order":"968","possible_hits":"3",},
{"lineNum":" 1424","line":"    }"},
{"lineNum":" 1425","line":""},
{"lineNum":" 1426","line":"    // TODO:fix zig build test-kcov for this test, for some reason running this test with kcov doesn\'t create test files in correct directories while zig build test-all works normally"},
{"lineNum":" 1427","line":"    test \"read directory entries with indirect blocks\" {","class":"lineCov","hits":"1","order":"971","possible_hits":"1",},
{"lineNum":" 1428","line":"        try project_t_utils.skip_slow_test();","class":"lineCov","hits":"1","order":"972","possible_hits":"1",},
{"lineNum":" 1429","line":""},
{"lineNum":" 1430","line":"        var ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"973","possible_hits":"1",},
{"lineNum":" 1431","line":"        defer ext2.deinit();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1432","line":""},
{"lineNum":" 1433","line":"        const many_files_dir = \"many_files_dir\";","class":"lineCov","hits":"1","order":"974","possible_hits":"1",},
{"lineNum":" 1434","line":"        const file_count = 1000;"},
{"lineNum":" 1435","line":""},
{"lineNum":" 1436","line":"        try utils.create_directory_with_many_files(t_alloc, many_files_dir, file_count, EXT2_PATH);","class":"linePartCov","hits":"1","order":"975","possible_hits":"2",},
{"lineNum":" 1437","line":"        defer utils.cleanup_directory_with_files(t_alloc, many_files_dir, EXT2_PATH) catch |err| {","class":"linePartCov","hits":"2","order":"1005","possible_hits":"14",},
{"lineNum":" 1438","line":"            tlog.warn(\"Failed to clean up test directory: {any}\", .{err});","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1439","line":"        };"},
{"lineNum":" 1440","line":""},
{"lineNum":" 1441","line":"        const root_entries = try ext2.read_dir_entries_with_inode_id(ROOT_INODE);","class":"linePartCov","hits":"2","order":"995","possible_hits":"3",},
{"lineNum":" 1442","line":"        defer DirEntry.free_entries(ext2.gpa, root_entries);","class":"linePartCov","hits":"1","order":"1004","possible_hits":"6",},
{"lineNum":" 1443","line":""},
{"lineNum":" 1444","line":"        var dir_inode_id: u32 = 0;","class":"lineCov","hits":"1","order":"996","possible_hits":"1",},
{"lineNum":" 1445","line":"        for (root_entries) |entry| {","class":"lineCov","hits":"3","order":"997","possible_hits":"3",},
{"lineNum":" 1446","line":"            tlog.info(\"{s}\", .{entry.name});","class":"lineCov","hits":"1","order":"998","possible_hits":"1",},
{"lineNum":" 1447","line":"            if (std.mem.eql(u8, entry.name, many_files_dir)) {","class":"lineCov","hits":"1","order":"999","possible_hits":"1",},
{"lineNum":" 1448","line":"                dir_inode_id = entry.inode_id;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1449","line":"                break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1450","line":"            }"},
{"lineNum":" 1451","line":"        }","class":"lineCov","hits":"2","order":"1000","possible_hits":"2",},
{"lineNum":" 1452","line":""},
{"lineNum":" 1453","line":"        tlog.info(\"dir_inode_id: {d}\", .{dir_inode_id});","class":"lineCov","hits":"1","order":"1001","possible_hits":"1",},
{"lineNum":" 1454","line":"        if (dir_inode_id == 0) {","class":"lineCov","hits":"1","order":"1002","possible_hits":"1",},
{"lineNum":" 1455","line":"            tlog.warn(\"Skipping test: couldn\'t find test directory\", .{});","class":"lineCov","hits":"1","order":"1003","possible_hits":"1",},
{"lineNum":" 1456","line":"            return;"},
{"lineNum":" 1457","line":"        }"},
{"lineNum":" 1458","line":""},
{"lineNum":" 1459","line":"        const dir_entries = try ext2.read_dir_entries_with_inode_id(dir_inode_id);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1460","line":"        defer DirEntry.free_entries(ext2.gpa, dir_entries);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"        const expected_min_entries = 2 + file_count * 95 / 100;"},
{"lineNum":" 1463","line":""},
{"lineNum":" 1464","line":"        tlog.debug(\"Found {d} entries in directory\", .{dir_entries.len});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1465","line":"        try t.expect(dir_entries.len >= expected_min_entries);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1466","line":""},
{"lineNum":" 1467","line":"        var found_count: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1468","line":"        for (0..10) |i| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1469","line":"            const file_name = try std.fmt.allocPrint(t_alloc, \"file_{d}\", .{i});","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1470","line":"            defer t_alloc.free(file_name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1471","line":""},
{"lineNum":" 1472","line":"            for (dir_entries) |entry| {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1473","line":"                if (std.mem.eql(u8, entry.name, file_name)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1474","line":"                    found_count += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1475","line":"                    break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1476","line":"                }"},
{"lineNum":" 1477","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1478","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1479","line":""},
{"lineNum":" 1480","line":"        tlog.debug(\"Found {d}/10 specific files by name\", .{found_count});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1481","line":"        try t.expect(found_count >= 8);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1482","line":"    }"},
{"lineNum":" 1483","line":""},
{"lineNum":" 1484","line":"    test \"read file data from ext2\" {","class":"lineCov","hits":"1","order":"1022","possible_hits":"1",},
{"lineNum":" 1485","line":"        var ext2 = try create_ext2();","class":"lineCov","hits":"1","order":"1023","possible_hits":"1",},
{"lineNum":" 1486","line":"        defer ext2.deinit();","class":"linePartCov","hits":"1","order":"1084","possible_hits":"10",},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"        const all_entries = try ext2.read_dir_entries_recursively_for_inode_id(ROOT_INODE);","class":"linePartCov","hits":"1","order":"1024","possible_hits":"2",},
{"lineNum":" 1489","line":"        defer DirEntry.free_entries(ext2.gpa, all_entries);","class":"linePartCov","hits":"1","order":"1083","possible_hits":"9",},
{"lineNum":" 1490","line":""},
{"lineNum":" 1491","line":"        var jpg_file_entry: ?DirEntry = null;","class":"lineCov","hits":"1","order":"1025","possible_hits":"1",},
{"lineNum":" 1492","line":"        for (all_entries) |entry| if (std.mem.eql(u8, entry.name, \"example1.jpg\")) {","class":"lineCov","hits":"3","order":"1026","possible_hits":"3",},
{"lineNum":" 1493","line":"            jpg_file_entry = entry;","class":"lineCov","hits":"1","order":"1028","possible_hits":"1",},
{"lineNum":" 1494","line":"            break;","class":"lineCov","hits":"1","order":"1029","possible_hits":"1",},
{"lineNum":" 1495","line":"        };","class":"linePartCov","hits":"1","order":"1027","possible_hits":"2",},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"        try t.expect(jpg_file_entry != null);","class":"linePartCov","hits":"1","order":"1030","possible_hits":"2",},
{"lineNum":" 1498","line":"        const file_inode_id = jpg_file_entry.?.inode_id;","class":"lineCov","hits":"2","order":"1031","possible_hits":"2",},
{"lineNum":" 1499","line":""},
{"lineNum":" 1500","line":"        const file_data = try ext2.read_file_data(file_inode_id);","class":"linePartCov","hits":"1","order":"1032","possible_hits":"3",},
{"lineNum":" 1501","line":"        defer ext2.gpa.free(file_data);","class":"linePartCov","hits":"1","order":"1082","possible_hits":"7",},
{"lineNum":" 1502","line":""},
{"lineNum":" 1503","line":"        try t.expectEqualSlices(u8, file_data[0..3], &[3]u8{ 0xFF, 0xD8, 0xFF });","class":"linePartCov","hits":"1","order":"1074","possible_hits":"2",},
{"lineNum":" 1504","line":""},
{"lineNum":" 1505","line":"        const original_file = try std.fs.cwd().openFile(\"input/jpgs/example1.jpg\", .{});","class":"linePartCov","hits":"1","order":"1075","possible_hits":"2",},
{"lineNum":" 1506","line":"        defer original_file.close();","class":"linePartCov","hits":"1","order":"1081","possible_hits":"5",},
{"lineNum":" 1507","line":""},
{"lineNum":" 1508","line":"        const expected_data = try original_file.reader().readAllAlloc(ext2.gpa, file_data.len);","class":"linePartCov","hits":"2","order":"1076","possible_hits":"4",},
{"lineNum":" 1509","line":"        defer ext2.gpa.free(expected_data);","class":"linePartCov","hits":"1","order":"1080","possible_hits":"4",},
{"lineNum":" 1510","line":""},
{"lineNum":" 1511","line":"        try t.expectEqualSlices(u8, expected_data, file_data);","class":"linePartCov","hits":"1","order":"1077","possible_hits":"2",},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"        if (t.log_level == .debug) {","class":"lineCov","hits":"1","order":"1078","possible_hits":"1",},
{"lineNum":" 1514","line":"            const output_path = \"output/test_read_ext2_file.jpg\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1515","line":"            const f = try std.fs.cwd().createFile(output_path, .{});","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1516","line":"            defer f.close();","class":"linePartCov","hits":"1","order":"1079","possible_hits":"3",},
{"lineNum":" 1517","line":"            try f.writer().writeAll(file_data);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1518","line":"            tlog.debug(\"Wrote file to {s}, size: {d} bytes\", .{output_path, file_data.len});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1519","line":"        }"},
{"lineNum":" 1520","line":"    }"},
{"lineNum":" 1521","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2025-03-09 09:32:06", "instrumented" : 488, "covered" : 385,};
var merged_data = [];
