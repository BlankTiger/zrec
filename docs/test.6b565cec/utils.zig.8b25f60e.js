var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"pub fn set_fields_alignment(comptime fields: []const std.builtin.Type.StructField, alignment: comptime_int) []std.builtin.Type.StructField {"},
{"lineNum":"    4","line":"    var new_fields: [fields.len]std.builtin.Type.StructField = undefined;"},
{"lineNum":"    5","line":"    inline for (fields, 0..) |f, idx| {"},
{"lineNum":"    6","line":"        var new_f = f;"},
{"lineNum":"    7","line":"        new_f.alignment = alignment;"},
{"lineNum":"    8","line":"        new_fields[idx] = new_f;"},
{"lineNum":"    9","line":"    }"},
{"lineNum":"   10","line":"    return &new_fields;"},
{"lineNum":"   11","line":"}"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"pub fn set_fields_alignment_in_struct(Struct: type, alignment: comptime_int) type {"},
{"lineNum":"   14","line":"    const info = @typeInfo(Struct).@\"struct\";"},
{"lineNum":"   15","line":"    const fields = info.fields;"},
{"lineNum":"   16","line":"    const new_fields = set_fields_alignment(fields, alignment);"},
{"lineNum":"   17","line":"    return @Type(.{"},
{"lineNum":"   18","line":"        .@\"struct\" = .{"},
{"lineNum":"   19","line":"            .fields = new_fields,"},
{"lineNum":"   20","line":"            .decls = info.decls,"},
{"lineNum":"   21","line":"            .backing_integer = info.backing_integer,"},
{"lineNum":"   22","line":"            .is_tuple = info.is_tuple,"},
{"lineNum":"   23","line":"            .layout = info.layout,"},
{"lineNum":"   24","line":"        }"},
{"lineNum":"   25","line":"    });"},
{"lineNum":"   26","line":"}"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"test set_fields_alignment_in_struct {","class":"lineCov","hits":"1","order":"67","possible_hits":"1",},
{"lineNum":"   29","line":"    comptime {","class":"lineCov","hits":"1","order":"68","possible_hits":"1",},
{"lineNum":"   30","line":"        const t = std.testing;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"        const _A = struct {"},
{"lineNum":"   33","line":"            a: u8,"},
{"lineNum":"   34","line":"            c: [3]u8,"},
{"lineNum":"   35","line":"            d: u32,"},
{"lineNum":"   36","line":"            e: usize,"},
{"lineNum":"   37","line":"            b: u3,"},
{"lineNum":"   38","line":"            f: []u8,"},
{"lineNum":"   39","line":"        };"},
{"lineNum":"   40","line":"        const A = set_fields_alignment_in_struct(_A, 1);"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"        const fields_before = @typeInfo(_A).@\"struct\".fields;"},
{"lineNum":"   43","line":"        const fields_after = @typeInfo(A).@\"struct\".fields;"},
{"lineNum":"   44","line":"        const expected_before = &[_]comptime_int{ 1, 1, 4, 8, 1, 8 };"},
{"lineNum":"   45","line":"        const expected_after = &[_]comptime_int{ 1 } ** fields_after.len;"},
{"lineNum":"   46","line":"        for (fields_before, fields_after, 0..) |fb, fa, idx| {"},
{"lineNum":"   47","line":"            try t.expectEqual(expected_before[idx], fb.alignment);"},
{"lineNum":"   48","line":"            try t.expectEqual(expected_after[idx], fa.alignment);"},
{"lineNum":"   49","line":"        }"},
{"lineNum":"   50","line":"    }"},
{"lineNum":"   51","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2025-03-09 09:32:06", "instrumented" : 2, "covered" : 2,};
var merged_data = [];
