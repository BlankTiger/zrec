var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"    3","line":"const lib = @import(\"lib.zig\");"},
{"lineNum":"    4","line":"const Reader = lib.Reader;"},
{"lineNum":"    5","line":"const log = std.log.scoped(.filesystems);"},
{"lineNum":"    6","line":"const FAT32 = @import(\"filesystems/FAT.zig\");"},
{"lineNum":"    7","line":"const NTFS = @import(\"filesystems/NTFS.zig\");"},
{"lineNum":"    8","line":"const EXT2 = @import(\"filesystems/EXT2.zig\");"},
{"lineNum":"    9","line":"const Filesystem = @import(\"filesystem.zig\").Filesystem;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"const Error ="},
{"lineNum":"   12","line":"    Filesystem.Error"},
{"lineNum":"   13","line":"    || Allocator.Error"},
{"lineNum":"   14","line":"    || std.fs.File.ReadError"},
{"lineNum":"   15","line":"    || std.fs.File.OpenError"},
{"lineNum":"   16","line":"    || std.posix.MMapError"},
{"lineNum":"   17","line":"    || error{ NoFilesystemMatch };"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"alloc: Allocator,"},
{"lineNum":"   20","line":"path: []const u8,"},
{"lineNum":"   21","line":"/// can be used to lookup what errors happened during a call to `determine_filesystem`"},
{"lineNum":"   22","line":"errors: std.ArrayList(Error),"},
{"lineNum":"   23","line":"_files: std.ArrayList(*std.fs.File),"},
{"lineNum":"   24","line":"_readers: std.ArrayList(*Reader),"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"const FsHandler = @This();"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"pub fn init(alloc: Allocator, filepath: []const u8) Error!FsHandler {","class":"lineCov","hits":"2","order":"77","possible_hits":"2",},
{"lineNum":"   29","line":"    return .{","class":"lineCov","hits":"2","order":"78","possible_hits":"2",},
{"lineNum":"   30","line":"        .alloc = alloc,"},
{"lineNum":"   31","line":"        .path = try alloc.dupe(u8, filepath),","class":"lineCov","hits":"1","order":"79","possible_hits":"1",},
{"lineNum":"   32","line":"        .errors = std.ArrayList(Error).init(alloc),","class":"lineCov","hits":"1","order":"80","possible_hits":"1",},
{"lineNum":"   33","line":"        ._files = std.ArrayList(*std.fs.File).init(alloc),","class":"lineCov","hits":"1","order":"81","possible_hits":"1",},
{"lineNum":"   34","line":"        ._readers = std.ArrayList(*Reader).init(alloc),","class":"lineCov","hits":"1","order":"82","possible_hits":"1",},
{"lineNum":"   35","line":"    };"},
{"lineNum":"   36","line":"}"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"pub fn deinit(self: *FsHandler) void {","class":"lineCov","hits":"2","order":"93","possible_hits":"2",},
{"lineNum":"   39","line":"    self.alloc.free(self.path);","class":"lineCov","hits":"1","order":"94","possible_hits":"1",},
{"lineNum":"   40","line":"    self.errors.deinit();","class":"lineCov","hits":"1","order":"95","possible_hits":"1",},
{"lineNum":"   41","line":"    for (self._readers.items) |r| {","class":"linePartCov","hits":"2","order":"96","possible_hits":"3",},
{"lineNum":"   42","line":"        r.deinit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"        self.alloc.destroy(r);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":"    self._readers.deinit();","class":"lineCov","hits":"1","order":"97","possible_hits":"1",},
{"lineNum":"   46","line":"    for (self._files.items) |f| {","class":"lineCov","hits":"3","order":"98","possible_hits":"3",},
{"lineNum":"   47","line":"        self.alloc.destroy(f);","class":"lineCov","hits":"1","order":"179","possible_hits":"1",},
{"lineNum":"   48","line":"    }","class":"lineCov","hits":"2","order":"180","possible_hits":"2",},
{"lineNum":"   49","line":"    self._files.deinit();","class":"lineCov","hits":"1","order":"99","possible_hits":"1",},
{"lineNum":"   50","line":"    self.* = undefined;","class":"lineCov","hits":"1","order":"100","possible_hits":"1",},
{"lineNum":"   51","line":"}"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"pub fn update_path(self: *FsHandler, new_path: []const u8) Allocator.Error!void {","class":"lineCov","hits":"2","order":"89","possible_hits":"2",},
{"lineNum":"   54","line":"    self.alloc.free(self.path);","class":"lineCov","hits":"1","order":"90","possible_hits":"1",},
{"lineNum":"   55","line":"    self.path = try self.alloc.dupe(u8, new_path);","class":"lineCov","hits":"1","order":"91","possible_hits":"1",},
{"lineNum":"   56","line":"}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"/// Caller must call deinit on the resulting Filesystem"},
{"lineNum":"   59","line":"pub fn determine_filesystem(self: *FsHandler) Error!Filesystem {","class":"lineCov","hits":"2","order":"112","possible_hits":"2",},
{"lineNum":"   60","line":"    inline for (std.meta.fields(Filesystem)) |field| {"},
{"lineNum":"   61","line":"        var reader = try self.create_new_reader();","class":"linePartCov","hits":"2","order":"113","possible_hits":"3",},
{"lineNum":"   62","line":"        errdefer reader.deinit();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   63","line":"        if (field.type.init(self.alloc, &reader)) |fs| {","class":"lineCov","hits":"3","order":"123","possible_hits":"3",},
{"lineNum":"   64","line":"            return @unionInit(Filesystem, field.name, fs);","class":"linePartCov","hits":"1","order":"622","possible_hits":"3",},
{"lineNum":"   65","line":"        } else |err| {"},
{"lineNum":"   66","line":"            log.info(\"couldnt init {any}, err: {any}\", .{field.type, err});","class":"lineCov","hits":"3","order":"136","possible_hits":"3",},
{"lineNum":"   67","line":"            try self.errors.append(err);","class":"linePartCov","hits":"3","order":"137","possible_hits":"6",},
{"lineNum":"   68","line":"        }"},
{"lineNum":"   69","line":"    }","class":"lineCov","hits":"3","order":"138","possible_hits":"3",},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    return Error.NoFilesystemMatch;","class":"lineCov","hits":"1","order":"174","possible_hits":"1",},
{"lineNum":"   72","line":"}"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"/// Caller must call `deinit` on the resulting Reader."},
{"lineNum":"   75","line":"pub fn create_new_reader(self: *FsHandler) Error!Reader {","class":"lineCov","hits":"2","order":"84","possible_hits":"2",},
{"lineNum":"   76","line":"    const f = try self.alloc.create(std.fs.File);","class":"lineCov","hits":"1","order":"85","possible_hits":"1",},
{"lineNum":"   77","line":"    errdefer self.alloc.destroy(f);","class":"linePartCov","hits":"1","order":"87","possible_hits":"3",},
{"lineNum":"   78","line":"    f.* = try std.fs.cwd().openFile(self.path, .{});","class":"lineCov","hits":"2","order":"86","possible_hits":"2",},
{"lineNum":"   79","line":"    try self._files.append(f);","class":"linePartCov","hits":"1","order":"114","possible_hits":"2",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    return try Reader.init(f);","class":"linePartCov","hits":"1","order":"115","possible_hits":"2",},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"test {","class":"lineCov","hits":"1","order":"3","possible_hits":"1",},
{"lineNum":"   85","line":"    std.testing.refAllDecls(Tests);","class":"lineCov","hits":"1","order":"4","possible_hits":"1",},
{"lineNum":"   86","line":"}"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"const Tests = struct {"},
{"lineNum":"   89","line":"    const t = std.testing;"},
{"lineNum":"   90","line":"    const t_alloc = t.allocator;"},
{"lineNum":"   91","line":"    const assert = std.debug.assert;"},
{"lineNum":"   92","line":"    const FAT32_PATH = \"./filesystems/fat32_filesystem.img\";"},
{"lineNum":"   93","line":"    const tlog = std.log.scoped(.filesystems_tests);"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    test \"create new reader cleans up everything when somethings goes wrong (file access err)\" {","class":"lineCov","hits":"1","order":"75","possible_hits":"1",},
{"lineNum":"   96","line":"        var fs_handler = try FsHandler.init(t_alloc, \"this path doesnt exist\");","class":"lineCov","hits":"1","order":"76","possible_hits":"1",},
{"lineNum":"   97","line":"        defer fs_handler.deinit();","class":"linePartCov","hits":"1","order":"92","possible_hits":"3",},
{"lineNum":"   98","line":"        try t.expectError(error.FileNotFound, fs_handler.create_new_reader());","class":"linePartCov","hits":"1","order":"83","possible_hits":"2",},
{"lineNum":"   99","line":"        try fs_handler.update_path(FAT32_PATH);","class":"linePartCov","hits":"1","order":"88","possible_hits":"2",},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    test \"hold all errors found during determine_filesystem\" {","class":"lineCov","hits":"1","order":"101","possible_hits":"1",},
{"lineNum":"  103","line":"        var _dir = t.tmpDir(.{});","class":"lineCov","hits":"1","order":"102","possible_hits":"1",},
{"lineNum":"  104","line":"        defer _dir.cleanup();","class":"linePartCov","hits":"1","order":"182","possible_hits":"8",},
{"lineNum":"  105","line":"        const dir = _dir.dir;","class":"lineCov","hits":"1","order":"103","possible_hits":"1",},
{"lineNum":"  106","line":"        const filename = \"tmp_not_filesystem\";","class":"lineCov","hits":"1","order":"104","possible_hits":"1",},
{"lineNum":"  107","line":"        {"},
{"lineNum":"  108","line":"            const tmp_file = try dir.createFile(filename, .{});","class":"linePartCov","hits":"1","order":"105","possible_hits":"3",},
{"lineNum":"  109","line":"            defer tmp_file.close();","class":"linePartCov","hits":"1","order":"107","possible_hits":"2",},
{"lineNum":"  110","line":"            _ = try tmp_file.write(\"siema elo tmp file\");","class":"linePartCov","hits":"1","order":"106","possible_hits":"2",},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":"        const path = try dir.realpathAlloc(t_alloc, filename);","class":"linePartCov","hits":"1","order":"108","possible_hits":"3",},
{"lineNum":"  113","line":"        defer t_alloc.free(path);","class":"linePartCov","hits":"1","order":"181","possible_hits":"5",},
{"lineNum":"  114","line":"        tlog.debug(\"{s}\", .{path});","class":"lineCov","hits":"1","order":"109","possible_hits":"1",},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"        var fs_handler = try FsHandler.init(t_alloc, path);","class":"linePartCov","hits":"1","order":"110","possible_hits":"2",},
{"lineNum":"  117","line":"        defer fs_handler.deinit();","class":"linePartCov","hits":"1","order":"178","possible_hits":"4",},
{"lineNum":"  118","line":"        try t.expectError(error.NoFilesystemMatch, fs_handler.determine_filesystem());","class":"linePartCov","hits":"1","order":"111","possible_hits":"2",},
{"lineNum":"  119","line":"        try t.expectEqual(3, fs_handler.errors.items.len);","class":"linePartCov","hits":"2","order":"175","possible_hits":"3",},
{"lineNum":"  120","line":"        try t.expectEqualSlices(","class":"linePartCov","hits":"1","order":"177","possible_hits":"2",},
{"lineNum":"  121","line":"            FsHandler.Error,"},
{"lineNum":"  122","line":"            fs_handler.errors.items,","class":"lineCov","hits":"1","order":"176","possible_hits":"1",},
{"lineNum":"  123","line":"            &[_]FsHandler.Error{"},
{"lineNum":"  124","line":"                error.FileTooSmall,"},
{"lineNum":"  125","line":"                error.ReadTooLittleForVBR,"},
{"lineNum":"  126","line":"                error.NotEnoughReadToParseSuperblock,"},
{"lineNum":"  127","line":"            }"},
{"lineNum":"  128","line":"        );"},
{"lineNum":"  129","line":"    }"},
{"lineNum":"  130","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2025-03-09 09:32:06", "instrumented" : 61, "covered" : 57,};
var merged_data = [];
