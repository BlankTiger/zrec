var data = {lines:[
{"lineNum":"    1","line":"const std       = @import(\"std\");"},
{"lineNum":"    2","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"    3","line":"const lib       = @import(\"lib.zig\");"},
{"lineNum":"    4","line":"const Reader    = lib.Reader;"},
{"lineNum":"    5","line":"const FAT32     = @import(\"filesystems/FAT.zig\");"},
{"lineNum":"    6","line":"const NTFS      = @import(\"filesystems/NTFS.zig\");"},
{"lineNum":"    7","line":"const EXT2      = @import(\"filesystems/EXT2.zig\");"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"pub const Filesystem = union(enum) {"},
{"lineNum":"   10","line":"    fat32: FAT32,"},
{"lineNum":"   11","line":"    ntfs:  NTFS,"},
{"lineNum":"   12","line":"    ext2:  EXT2,"},
{"lineNum":"   13","line":"    // ext3: EXT3,"},
{"lineNum":"   14","line":"    // ext4: EXT4,"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    pub const Error = FAT32.Error || EXT2.Error || NTFS.Error;"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    const FilesystemEnum = @typeInfo(Filesystem).@\"union\".tag_type.?;"},
{"lineNum":"   19","line":"    pub const EstimationResult = std.EnumMap(FilesystemEnum, f32);"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    pub fn estimate(alloc: Allocator, reader: *Reader) EstimationResult {","class":"lineCov","hits":"2","order":"189","possible_hits":"2",},
{"lineNum":"   22","line":"        var res: EstimationResult = .initFull(0.0);","class":"lineCov","hits":"1","order":"190","possible_hits":"1",},
{"lineNum":"   23","line":"        inline for (@typeInfo(Filesystem).@\"union\".fields) |field| {"},
{"lineNum":"   24","line":"            const tag = @field(FilesystemEnum, field.name);","class":"lineCov","hits":"3","order":"191","possible_hits":"3",},
{"lineNum":"   25","line":"            res.put(tag, field.type.estimate(alloc, reader));","class":"lineCov","hits":"3","order":"192","possible_hits":"3",},
{"lineNum":"   26","line":"        }"},
{"lineNum":"   27","line":"        return res;","class":"lineCov","hits":"1","order":"199","possible_hits":"1",},
{"lineNum":"   28","line":"    }"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    pub fn deinit(self: *Filesystem) void {","class":"lineCov","hits":"2","order":"634","possible_hits":"2",},
{"lineNum":"   31","line":"        switch (self.*) { inline else => |*it| it.deinit() }","class":"lineCov","hits":"2","order":"635","possible_hits":"2",},
{"lineNum":"   32","line":"        self.* = undefined;","class":"lineCov","hits":"1","order":"640","possible_hits":"1",},
{"lineNum":"   33","line":"    }"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    pub fn name(self: Filesystem) [:0]const u8 {"},
{"lineNum":"   36","line":"        return @tagName(self);"},
{"lineNum":"   37","line":"    }"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    /// Returns size of the filesystem in bytes."},
{"lineNum":"   40","line":"    pub fn get_size(self: Filesystem) f64 {"},
{"lineNum":"   41","line":"        return switch (self) { inline else => |*it| it.get_size() };"},
{"lineNum":"   42","line":"    }"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    /// Returns free size of the filesystem in bytes."},
{"lineNum":"   45","line":"    pub fn get_free_size(self: Filesystem) f64 {"},
{"lineNum":"   46","line":"        return switch (self) { inline else => |*it| it.get_free_size() };"},
{"lineNum":"   47","line":"    }"},
{"lineNum":"   48","line":"};"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"test {","class":"lineCov","hits":"1","order":"5","possible_hits":"1",},
{"lineNum":"   51","line":"    std.testing.refAllDecls(Tests);","class":"lineCov","hits":"1","order":"6","possible_hits":"1",},
{"lineNum":"   52","line":"}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"const Tests = struct {"},
{"lineNum":"   55","line":"    const t_alloc = std.testing.allocator;"},
{"lineNum":"   56","line":"    const t = std.testing;"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    const PATH = \"./filesystems/ext2_filesystem.img\";"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    fn create_new_reader() !Reader {","class":"lineCov","hits":"1","order":"185","possible_hits":"1",},
{"lineNum":"   61","line":"        const f = try std.fs.cwd().openFile(PATH, .{});","class":"lineCov","hits":"1","order":"186","possible_hits":"1",},
{"lineNum":"   62","line":"        return try Reader.init(&f);","class":"lineCov","hits":"1","order":"187","possible_hits":"1",},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    test \"RUN estimation\" {","class":"lineCov","hits":"1","order":"183","possible_hits":"1",},
{"lineNum":"   66","line":"        var reader = try create_new_reader();","class":"lineCov","hits":"1","order":"184","possible_hits":"1",},
{"lineNum":"   67","line":"        defer reader.deinit();","class":"linePartCov","hits":"1","order":"203","possible_hits":"4",},
{"lineNum":"   68","line":"        const estimation = Filesystem.estimate(t_alloc, &reader);","class":"lineCov","hits":"1","order":"188","possible_hits":"1",},
{"lineNum":"   69","line":"        try t.expectEqual(0, estimation.get(.ext2));","class":"linePartCov","hits":"2","order":"200","possible_hits":"3",},
{"lineNum":"   70","line":"        try t.expectEqual(0, estimation.get(.ntfs));","class":"linePartCov","hits":"2","order":"201","possible_hits":"3",},
{"lineNum":"   71","line":"        try t.expectEqual(0, estimation.get(.fat32));","class":"linePartCov","hits":"2","order":"202","possible_hits":"3",},
{"lineNum":"   72","line":"    }"},
{"lineNum":"   73","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2025-03-09 09:32:06", "instrumented" : 20, "covered" : 20,};
var merged_data = [];
