var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const posix = std.posix;"},
{"lineNum":"    4","line":"const win = std.os.windows;"},
{"lineNum":"    5","line":"const log = std.log.scoped(.reader);"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"pub const ReadReader = struct {"},
{"lineNum":"    8","line":"    file: *const std.fs.File,"},
{"lineNum":"    9","line":"    reader: std.fs.File.Reader,"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"    // BUG: buffered reader was causing seeking to fail because of the internal buffering"},
{"lineNum":"   12","line":"    // maybe write a custom buffered reader?"},
{"lineNum":"   13","line":"    // pub const BufferedReader = std.io.BufferedReader(4096, std.fs.File.Reader);"},
{"lineNum":"   14","line":"    // reader: BufferedReader,"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    const Self = @This();"},
{"lineNum":"   17","line":"    const Error = std.fs.File.ReadError || std.fs.File.SeekError;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    pub fn init(file: *const std.fs.File) Error!Self {","class":"lineCov","hits":"2","order":"214","possible_hits":"2",},
{"lineNum":"   20","line":"        const reader = file.reader();","class":"lineCov","hits":"1","order":"215","possible_hits":"1",},
{"lineNum":"   21","line":"        return Self { .file = file, .reader = reader };","class":"lineCov","hits":"1","order":"216","possible_hits":"1",},
{"lineNum":"   22","line":"    }"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    pub fn deinit(self: Self) void {","class":"lineCov","hits":"2","order":"243","possible_hits":"2",},
{"lineNum":"   25","line":"        self.file.close();","class":"lineCov","hits":"1","order":"244","possible_hits":"1",},
{"lineNum":"   26","line":"    }"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    pub fn read(self: *Self, dest: []u8) !usize {","class":"lineCov","hits":"2","order":"219","possible_hits":"2",},
{"lineNum":"   29","line":"        return self.reader.read(dest);","class":"lineCov","hits":"2","order":"220","possible_hits":"2",},
{"lineNum":"   30","line":"    }"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    pub fn seek_by(self: *Self, offset: i64) !void {","class":"lineCov","hits":"2","order":"231","possible_hits":"2",},
{"lineNum":"   33","line":"        return self.file.seekBy(offset);","class":"lineCov","hits":"1","order":"232","possible_hits":"1",},
{"lineNum":"   34","line":"    }"},
{"lineNum":"   35","line":"};"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"// TODO: make it work on windows, possibly a problem:"},
{"lineNum":"   39","line":"// https://learn.microsoft.com/en-us/windows/win32/memory/creating-a-file-mapping-object"},
{"lineNum":"   40","line":"// The size of a file mapping object that is backed by a named file is limited by disk space. The size of a file view is limited to the largest available contiguous block of unreserved virtual memory. This is at most 2 GB minus the virtual memory already reserved by the process."},
{"lineNum":"   41","line":"// on linux I think that there is no such limit as 2 GB, needs more testing too"},
{"lineNum":"   42","line":"//"},
{"lineNum":"   43","line":"// extern \"kernel32\" fn CreateFileMappingA("},
{"lineNum":"   44","line":"//     hFile: win.HANDLE,"},
{"lineNum":"   45","line":"//     lpFileMappingAttributes: *const std.os.windows.SECURITY_ATTRIBUTES,"},
{"lineNum":"   46","line":"//     flProtect: win.DWORD,"},
{"lineNum":"   47","line":"//     dwMaximumSizeHigh: win.DWORD,"},
{"lineNum":"   48","line":"//     dwMaximumSizeLow: win.DWORD,"},
{"lineNum":"   49","line":"//     lpName: win.LPCSTR,"},
{"lineNum":"   50","line":"// ) win.HANDLE;"},
{"lineNum":"   51","line":"//"},
{"lineNum":"   52","line":"// fn mmap("},
{"lineNum":"   53","line":"//     ptr: ?[*]align(std.heap.pageSize()) u8,"},
{"lineNum":"   54","line":"//     length: usize,"},
{"lineNum":"   55","line":"//     prot: u32,"},
{"lineNum":"   56","line":"//     flags: posix.system.MAP,"},
{"lineNum":"   57","line":"//     fd: posix.fd_t,"},
{"lineNum":"   58","line":"//     offset: u64,"},
{"lineNum":"   59","line":"// ) posix.MMapError!MmapReader.MemT {"},
{"lineNum":"   60","line":"//     _ = offset;"},
{"lineNum":"   61","line":"//     _ = fd;"},
{"lineNum":"   62","line":"//     _ = flags;"},
{"lineNum":"   63","line":"//     _ = prot;"},
{"lineNum":"   64","line":"//     _ = length;"},
{"lineNum":"   65","line":"//     _ = ptr;"},
{"lineNum":"   66","line":"//"},
{"lineNum":"   67","line":"//     switch (builtin.os.tag) {"},
{"lineNum":"   68","line":"//         .linux => {},"},
{"lineNum":"   69","line":"//         .windows => {},"},
{"lineNum":"   70","line":"//         else => unreachable,"},
{"lineNum":"   71","line":"//     }"},
{"lineNum":"   72","line":"// }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"// TODO: implement the std io reader interface to get a lot of functionality for free"},
{"lineNum":"   75","line":"pub const MmapReader = struct {"},
{"lineNum":"   76","line":"    pub const MemT = []align(std.heap.pageSize()) u8;"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    mem: MemT,"},
{"lineNum":"   79","line":"    mem_shared: bool = false,"},
{"lineNum":"   80","line":"    idx: usize = 0,"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    const Self = @This();"},
{"lineNum":"   83","line":"    const Error = posix.MMapError || posix.FStatError;"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    /// `file` is closed internally and should be passed in opened."},
{"lineNum":"   86","line":"    pub fn init(file: *const std.fs.File) Error!Self {","class":"lineCov","hits":"2","order":"116","possible_hits":"2",},
{"lineNum":"   87","line":"        defer file.close();","class":"linePartCov","hits":"1","order":"122","possible_hits":"3",},
{"lineNum":"   88","line":"        const fd = file.handle;","class":"lineCov","hits":"1","order":"117","possible_hits":"1",},
{"lineNum":"   89","line":"        const stats = try posix.fstat(fd);","class":"linePartCov","hits":"1","order":"118","possible_hits":"2",},
{"lineNum":"   90","line":"        const len: usize = @intCast(stats.size);","class":"lineCov","hits":"1","order":"119","possible_hits":"1",},
{"lineNum":"   91","line":"        const mem = switch (builtin.os.tag) {"},
{"lineNum":"   92","line":"            .linux => try posix.mmap(null, len, posix.PROT.READ, .{ .TYPE = .SHARED }, fd, 0),","class":"linePartCov","hits":"1","order":"120","possible_hits":"2",},
{"lineNum":"   93","line":"            .windows => try win.mmap(),"},
{"lineNum":"   94","line":"            else => unreachable,"},
{"lineNum":"   95","line":"        };"},
{"lineNum":"   96","line":"        return .{ .mem = mem };","class":"lineCov","hits":"2","order":"121","possible_hits":"2",},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    pub fn init_with_mem(mem: MemT) Self {"},
{"lineNum":"  100","line":"        return .{"},
{"lineNum":"  101","line":"            .mem = mem,"},
{"lineNum":"  102","line":"            .mem_shared = true,"},
{"lineNum":"  103","line":"        };"},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    pub fn deinit(self: Self) void {","class":"lineCov","hits":"1","order":"204","possible_hits":"1",},
{"lineNum":"  107","line":"        if (!self.mem_shared) _ = posix.munmap(self.mem);","class":"lineCov","hits":"1","order":"205","possible_hits":"1",},
{"lineNum":"  108","line":"    }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    pub fn read_struct_endian(self: *Self, T: anytype, dest: *T, endian: std.builtin.Endian) !usize {","class":"lineCov","hits":"2","order":"149","possible_hits":"2",},
{"lineNum":"  111","line":"        const t_info = @typeInfo(T);"},
{"lineNum":"  112","line":"        var read_bytes_count: usize = 0;","class":"lineCov","hits":"1","order":"150","possible_hits":"1",},
{"lineNum":"  113","line":"        switch (t_info) {"},
{"lineNum":"  114","line":"            .@\"struct\" => |s_info| {"},
{"lineNum":"  115","line":"                const fields = s_info.fields;"},
{"lineNum":"  116","line":"                inline for (fields) |f| {"},
{"lineNum":"  117","line":"                    // only integers are byteswapped, [_]u8 fields stay the same"},
{"lineNum":"  118","line":"                    const f_t_info = @typeInfo(f.type);"},
{"lineNum":"  119","line":"                    switch (f_t_info) {"},
{"lineNum":"  120","line":"                        .int, .float => {"},
{"lineNum":"  121","line":"                            const dest_f = &@field(dest, f.name);","class":"lineCov","hits":"19","order":"157","possible_hits":"19",},
{"lineNum":"  122","line":"                            const dst = std.mem.asBytes(dest_f);","class":"lineCov","hits":"19","order":"158","possible_hits":"19",},
{"lineNum":"  123","line":"                            read_bytes_count += try self.read(dst);","class":"linePartCov","hits":"19","order":"159","possible_hits":"24",},
{"lineNum":"  124","line":"                            dest_f.* = if (endian == .little) @byteSwap(dest_f.*) else dest_f.*;","class":"lineCov","hits":"19","order":"160","possible_hits":"19",},
{"lineNum":"  125","line":"                        },"},
{"lineNum":"  126","line":"                        .array => |arr_info| {"},
{"lineNum":"  127","line":"                            _ = arr_info;"},
{"lineNum":"  128","line":"                            const arr_ptr = &@field(dest, f.name);","class":"lineCov","hits":"6","order":"151","possible_hits":"6",},
{"lineNum":"  129","line":"                            const dst = std.mem.asBytes(arr_ptr);","class":"lineCov","hits":"6","order":"152","possible_hits":"6",},
{"lineNum":"  130","line":"                            read_bytes_count += try self.read(dst);","class":"linePartCov","hits":"6","order":"153","possible_hits":"11",},
{"lineNum":"  131","line":"                        },"},
{"lineNum":"  132","line":"                        else => unreachable,"},
{"lineNum":"  133","line":"                    }"},
{"lineNum":"  134","line":"                }"},
{"lineNum":"  135","line":"            },"},
{"lineNum":"  136","line":"            else => unreachable,"},
{"lineNum":"  137","line":"        }"},
{"lineNum":"  138","line":"        return read_bytes_count;","class":"lineCov","hits":"1","order":"161","possible_hits":"1",},
{"lineNum":"  139","line":"    }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    pub fn read(self: *Self, dest: []u8) !usize {","class":"lineCov","hits":"2","order":"127","possible_hits":"2",},
{"lineNum":"  142","line":"        if (self.idx > self.mem.len) return 0;","class":"lineCov","hits":"2","order":"128","possible_hits":"2",},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"        const bytes_left = self.mem.len - self.idx;","class":"linePartCov","hits":"1","order":"129","possible_hits":"2",},
{"lineNum":"  145","line":"        if (bytes_left < dest.len) {","class":"lineCov","hits":"1","order":"130","possible_hits":"1",},
{"lineNum":"  146","line":"            @memcpy(dest[0..bytes_left], self.mem[self.idx..self.idx+bytes_left]);","class":"lineCov","hits":"3","order":"131","possible_hits":"3",},
{"lineNum":"  147","line":"            self.idx += bytes_left;","class":"linePartCov","hits":"1","order":"132","possible_hits":"2",},
{"lineNum":"  148","line":"            return bytes_left;","class":"lineCov","hits":"2","order":"133","possible_hits":"2",},
{"lineNum":"  149","line":"        }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        @memcpy(dest, self.mem[self.idx..self.idx+dest.len]);","class":"linePartCov","hits":"2","order":"154","possible_hits":"3",},
{"lineNum":"  152","line":"        self.idx += dest.len;","class":"linePartCov","hits":"1","order":"155","possible_hits":"2",},
{"lineNum":"  153","line":"        return dest.len;","class":"lineCov","hits":"1","order":"156","possible_hits":"1",},
{"lineNum":"  154","line":"    }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    pub fn read_u32(self: *Self) u32 {","class":"lineCov","hits":"2","order":"881","possible_hits":"2",},
{"lineNum":"  157","line":"        const idx = self.idx;","class":"lineCov","hits":"1","order":"882","possible_hits":"1",},
{"lineNum":"  158","line":"        const bytes: [4]u8 = .{ self.mem[idx], self.mem[idx+1], self.mem[idx+2], self.mem[idx+3] };","class":"lineCov","hits":"2","order":"883","possible_hits":"2",},
{"lineNum":"  159","line":"        self.idx += 4;","class":"linePartCov","hits":"1","order":"884","possible_hits":"2",},
{"lineNum":"  160","line":"        return std.mem.readInt(u32, &bytes, .little);","class":"lineCov","hits":"1","order":"885","possible_hits":"1",},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    pub fn read_u16(self: *Self) u16 {","class":"lineCov","hits":"2","order":"887","possible_hits":"2",},
{"lineNum":"  164","line":"        const idx = self.idx;","class":"lineCov","hits":"1","order":"888","possible_hits":"1",},
{"lineNum":"  165","line":"        const bytes: [2]u8 = .{ self.mem[idx], self.mem[idx+1] };","class":"lineCov","hits":"2","order":"889","possible_hits":"2",},
{"lineNum":"  166","line":"        self.idx += 2;","class":"linePartCov","hits":"1","order":"890","possible_hits":"2",},
{"lineNum":"  167","line":"        return std.mem.readInt(u16, &bytes, .little);","class":"lineCov","hits":"1","order":"891","possible_hits":"1",},
{"lineNum":"  168","line":"    }"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    pub fn read_u8(self: *Self) u8 {","class":"lineCov","hits":"2","order":"893","possible_hits":"2",},
{"lineNum":"  171","line":"        self.idx += 1;","class":"lineCov","hits":"1","order":"894","possible_hits":"1",},
{"lineNum":"  172","line":"        return self.mem[self.idx-1];","class":"lineCov","hits":"1","order":"895","possible_hits":"1",},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    pub fn seek_by(self: *Self, offset: i64) !void {","class":"lineCov","hits":"2","order":"234","possible_hits":"2",},
{"lineNum":"  176","line":"        const _idx: i64 = @intCast(self.idx);","class":"lineCov","hits":"1","order":"235","possible_hits":"1",},
{"lineNum":"  177","line":"        if (_idx + offset < 0) self.idx = 0;","class":"linePartCov","hits":"1","order":"236","possible_hits":"2",},
{"lineNum":"  178","line":"        if (_idx + offset > self.mem.len) self.idx = self.mem.len;","class":"linePartCov","hits":"1","order":"237","possible_hits":"2",},
{"lineNum":"  179","line":"        self.idx = @intCast(_idx + offset);","class":"linePartCov","hits":"1","order":"238","possible_hits":"2",},
{"lineNum":"  180","line":"    }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    pub fn seek_to(self: *Self, idx: usize) !void {","class":"lineCov","hits":"2","order":"146","possible_hits":"2",},
{"lineNum":"  183","line":"        self.idx = idx;","class":"lineCov","hits":"1","order":"147","possible_hits":"1",},
{"lineNum":"  184","line":"    }"},
{"lineNum":"  185","line":"};"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"test {","class":"lineCov","hits":"1","order":"7","possible_hits":"1",},
{"lineNum":"  188","line":"    std.testing.refAllDecls(Tests);","class":"lineCov","hits":"1","order":"8","possible_hits":"1",},
{"lineNum":"  189","line":"}"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"const Tests = struct {"},
{"lineNum":"  192","line":"    const t = std.testing;"},
{"lineNum":"  193","line":"    const t_utils = @import(\"testing_utils.zig\");"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    test \"MmapReader read full fat32 image, result should be equivalent to reading via read system calls, seeking works too\" {","class":"lineCov","hits":"1","order":"206","possible_hits":"1",},
{"lineNum":"  196","line":"        try t_utils.skip_slow_test();","class":"lineCov","hits":"1","order":"207","possible_hits":"1",},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"        const path = \"filesystems/fat32_filesystem.img\";","class":"lineCov","hits":"1","order":"208","possible_hits":"1",},
{"lineNum":"  199","line":"        var read_call_buf: [512]u8 = undefined;","class":"lineCov","hits":"1","order":"209","possible_hits":"1",},
{"lineNum":"  200","line":"        var mmap_call_buf: [512]u8 = undefined;","class":"lineCov","hits":"1","order":"210","possible_hits":"1",},
{"lineNum":"  201","line":"        const f_read = try std.fs.cwd().openFile(path, .{});","class":"lineCov","hits":"1","order":"211","possible_hits":"1",},
{"lineNum":"  202","line":"        const f_mmap = try std.fs.cwd().openFile(path, .{});","class":"lineCov","hits":"1","order":"212","possible_hits":"1",},
{"lineNum":"  203","line":"        var reader_read = try ReadReader.init(&f_read);","class":"lineCov","hits":"1","order":"213","possible_hits":"1",},
{"lineNum":"  204","line":"        defer reader_read.deinit();","class":"linePartCov","hits":"1","order":"242","possible_hits":"12",},
{"lineNum":"  205","line":"        var reader_mmap = try MmapReader.init(&f_mmap);","class":"linePartCov","hits":"1","order":"217","possible_hits":"2",},
{"lineNum":"  206","line":"        defer reader_mmap.deinit();","class":"linePartCov","hits":"1","order":"241","possible_hits":"11",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"        var bytes_read_read = try reader_read.read(&read_call_buf);","class":"linePartCov","hits":"1","order":"218","possible_hits":"2",},
{"lineNum":"  209","line":"        var bytes_read_mmap = try reader_mmap.read(&mmap_call_buf);","class":"lineCov","hits":"1","order":"221","possible_hits":"1",},
{"lineNum":"  210","line":"        try t.expectEqual(bytes_read_read, bytes_read_mmap);","class":"linePartCov","hits":"2","order":"222","possible_hits":"3",},
{"lineNum":"  211","line":"        try t.expectEqualSlices(u8, &read_call_buf, &mmap_call_buf);","class":"linePartCov","hits":"1","order":"223","possible_hits":"2",},
{"lineNum":"  212","line":"        while (bytes_read_read > 0) {","class":"lineCov","hits":"1","order":"224","possible_hits":"1",},
{"lineNum":"  213","line":"            bytes_read_read = try reader_read.read(&read_call_buf);","class":"linePartCov","hits":"1","order":"225","possible_hits":"3",},
{"lineNum":"  214","line":"            bytes_read_mmap = try reader_mmap.read(&mmap_call_buf);","class":"lineCov","hits":"1","order":"226","possible_hits":"1",},
{"lineNum":"  215","line":"            try t.expectEqual(bytes_read_read, bytes_read_mmap);","class":"linePartCov","hits":"2","order":"227","possible_hits":"3",},
{"lineNum":"  216","line":"            try t.expectEqualSlices(u8, &read_call_buf, &mmap_call_buf);","class":"linePartCov","hits":"1","order":"228","possible_hits":"2",},
{"lineNum":"  217","line":"        }","class":"lineCov","hits":"3","order":"229","possible_hits":"3",},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"        try reader_read.seek_by(-1000);","class":"linePartCov","hits":"1","order":"230","possible_hits":"2",},
{"lineNum":"  220","line":"        try reader_mmap.seek_by(-1000);","class":"lineCov","hits":"1","order":"233","possible_hits":"1",},
{"lineNum":"  221","line":"        while (bytes_read_read > 0) {","class":"lineCov","hits":"1","order":"239","possible_hits":"1",},
{"lineNum":"  222","line":"            bytes_read_read = try reader_read.read(&read_call_buf);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  223","line":"            bytes_read_mmap = try reader_mmap.read(&mmap_call_buf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"            try t.expectEqual(bytes_read_read, bytes_read_mmap);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  225","line":"            try t.expectEqualSlices(u8, &read_call_buf, &mmap_call_buf);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"        }","class":"linePartCov","hits":"1","order":"240","possible_hits":"3",},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    test \"reader can go back by using seek_by on underlying file\" {","class":"lineCov","hits":"1","order":"245","possible_hits":"1",},
{"lineNum":"  230","line":"        const path = \"temp_reader_test_file\";","class":"lineCov","hits":"1","order":"246","possible_hits":"1",},
{"lineNum":"  231","line":"        const msg = \"hola senorita\";","class":"lineCov","hits":"1","order":"247","possible_hits":"1",},
{"lineNum":"  232","line":"        var wrote_bytes: usize = 0;","class":"lineCov","hits":"1","order":"248","possible_hits":"1",},
{"lineNum":"  233","line":"        defer std.fs.cwd().deleteFile(path) catch {};","class":"lineNoCov","hits":"0","possible_hits":"21",},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"        {"},
{"lineNum":"  236","line":"            const f = try std.fs.cwd().createFile(path, .{});","class":"linePartCov","hits":"2","order":"249","possible_hits":"4",},
{"lineNum":"  237","line":"            defer f.close();","class":"linePartCov","hits":"1","order":"251","possible_hits":"2",},
{"lineNum":"  238","line":"            wrote_bytes = try f.writer().write(msg);","class":"linePartCov","hits":"3","order":"250","possible_hits":"4",},
{"lineNum":"  239","line":"        }"},
{"lineNum":"  240","line":"        var buf1: [msg.len]u8 = undefined;","class":"lineCov","hits":"1","order":"252","possible_hits":"1",},
{"lineNum":"  241","line":"        var buf2: [msg.len]u8 = undefined;","class":"lineCov","hits":"1","order":"253","possible_hits":"1",},
{"lineNum":"  242","line":"        {"},
{"lineNum":"  243","line":"            const f = try std.fs.cwd().openFile(path, .{});","class":"linePartCov","hits":"2","order":"254","possible_hits":"4",},
{"lineNum":"  244","line":"            defer f.close();","class":"linePartCov","hits":"1","order":"261","possible_hits":"7",},
{"lineNum":"  245","line":"            var r = try ReadReader.init(&f);","class":"linePartCov","hits":"2","order":"255","possible_hits":"4",},
{"lineNum":"  246","line":"            const read_bytes1 = try r.read(&buf1);","class":"linePartCov","hits":"2","order":"256","possible_hits":"4",},
{"lineNum":"  247","line":"            try r.seek_by(-@as(i64, @intCast(read_bytes1)));","class":"linePartCov","hits":"1","order":"257","possible_hits":"3",},
{"lineNum":"  248","line":"            const read_bytes2 = try r.read(&buf2);","class":"linePartCov","hits":"2","order":"258","possible_hits":"4",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"            try t.expectEqual(wrote_bytes, read_bytes1);","class":"linePartCov","hits":"2","order":"259","possible_hits":"3",},
{"lineNum":"  251","line":"            try t.expectEqual(wrote_bytes, read_bytes2);","class":"linePartCov","hits":"2","order":"260","possible_hits":"3",},
{"lineNum":"  252","line":"        }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"        try t.expectEqualStrings(&buf1, &buf2);","class":"linePartCov","hits":"1","order":"262","possible_hits":"2",},
{"lineNum":"  255","line":"        try t.expectEqualStrings(msg, &buf1);","class":"linePartCov","hits":"1","order":"263","possible_hits":"2",},
{"lineNum":"  256","line":"        try t.expectEqualStrings(msg, &buf2);","class":"linePartCov","hits":"1","order":"264","possible_hits":"2",},
{"lineNum":"  257","line":"    }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    test \"make sure it works when std.io.BufferedReader\'s buf is filled and we go back\" {","class":"lineCov","hits":"1","order":"265","possible_hits":"1",},
{"lineNum":"  260","line":"        const path = \"temp_reader_test_file2\";","class":"lineCov","hits":"1","order":"266","possible_hits":"1",},
{"lineNum":"  261","line":"        const msg = \"hola senorita\" ** 4096;","class":"lineCov","hits":"1","order":"267","possible_hits":"1",},
{"lineNum":"  262","line":"        var wrote_bytes: usize = 0;","class":"lineCov","hits":"1","order":"268","possible_hits":"1",},
{"lineNum":"  263","line":"        defer std.fs.cwd().deleteFile(path) catch {};","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"        {"},
{"lineNum":"  266","line":"            const f = try std.fs.cwd().createFile(path, .{});","class":"linePartCov","hits":"2","order":"269","possible_hits":"4",},
{"lineNum":"  267","line":"            defer f.close();","class":"linePartCov","hits":"1","order":"272","possible_hits":"2",},
{"lineNum":"  268","line":"            try f.writer().writeAll(msg);","class":"linePartCov","hits":"2","order":"270","possible_hits":"3",},
{"lineNum":"  269","line":"            wrote_bytes = msg.len;","class":"lineCov","hits":"1","order":"271","possible_hits":"1",},
{"lineNum":"  270","line":"        }"},
{"lineNum":"  271","line":"        var buf1: [msg.len]u8 = undefined;","class":"lineCov","hits":"1","order":"273","possible_hits":"1",},
{"lineNum":"  272","line":"        var buf2: [msg.len]u8 = undefined;","class":"lineCov","hits":"1","order":"274","possible_hits":"1",},
{"lineNum":"  273","line":"        var buf3: [msg.len/2]u8 = undefined;","class":"lineCov","hits":"1","order":"275","possible_hits":"1",},
{"lineNum":"  274","line":"        var buf4: [3]u8 = undefined;","class":"lineCov","hits":"1","order":"276","possible_hits":"1",},
{"lineNum":"  275","line":"        {"},
{"lineNum":"  276","line":"            const f = try std.fs.cwd().openFile(path, .{});","class":"linePartCov","hits":"2","order":"277","possible_hits":"4",},
{"lineNum":"  277","line":"            defer f.close();","class":"linePartCov","hits":"1","order":"290","possible_hits":"13",},
{"lineNum":"  278","line":"            var r = try ReadReader.init(&f);","class":"linePartCov","hits":"2","order":"278","possible_hits":"4",},
{"lineNum":"  279","line":"            const read_bytes1 = try r.read(&buf1);","class":"linePartCov","hits":"2","order":"279","possible_hits":"4",},
{"lineNum":"  280","line":"            try r.seek_by(-@as(i64, @intCast(read_bytes1)));","class":"linePartCov","hits":"1","order":"280","possible_hits":"3",},
{"lineNum":"  281","line":"            const read_bytes2 = try r.read(&buf2);","class":"linePartCov","hits":"2","order":"281","possible_hits":"4",},
{"lineNum":"  282","line":"            try r.seek_by(-@as(i64, @intCast(read_bytes1/2)));","class":"linePartCov","hits":"1","order":"282","possible_hits":"3",},
{"lineNum":"  283","line":"            const read_bytes3 = try r.read(&buf3);","class":"linePartCov","hits":"2","order":"283","possible_hits":"4",},
{"lineNum":"  284","line":"            try r.seek_by(-3);","class":"linePartCov","hits":"1","order":"284","possible_hits":"2",},
{"lineNum":"  285","line":"            const read_bytes4 = try r.read(&buf4);","class":"linePartCov","hits":"2","order":"285","possible_hits":"4",},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"            try t.expectEqual(wrote_bytes, read_bytes1);","class":"linePartCov","hits":"2","order":"286","possible_hits":"3",},
{"lineNum":"  288","line":"            try t.expectEqual(wrote_bytes, read_bytes2);","class":"linePartCov","hits":"2","order":"287","possible_hits":"3",},
{"lineNum":"  289","line":"            try t.expectEqual(wrote_bytes/2, read_bytes3);","class":"linePartCov","hits":"2","order":"288","possible_hits":"3",},
{"lineNum":"  290","line":"            try t.expectEqual(read_bytes4, 3);","class":"linePartCov","hits":"1","order":"289","possible_hits":"2",},
{"lineNum":"  291","line":"        }"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"        try t.expectEqualStrings(&buf1, &buf2);","class":"linePartCov","hits":"1","order":"291","possible_hits":"2",},
{"lineNum":"  294","line":"        try t.expectEqualStrings(msg, &buf1);","class":"linePartCov","hits":"1","order":"292","possible_hits":"2",},
{"lineNum":"  295","line":"        try t.expectEqualStrings(msg, &buf2);","class":"linePartCov","hits":"1","order":"293","possible_hits":"2",},
{"lineNum":"  296","line":"        try t.expectEqualStrings(msg[msg.len/2..], &buf3);","class":"linePartCov","hits":"1","order":"294","possible_hits":"2",},
{"lineNum":"  297","line":"        try t.expectEqualStrings(msg[msg.len-3..], &buf4);","class":"linePartCov","hits":"1","order":"295","possible_hits":"2",},
{"lineNum":"  298","line":"    }"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    test \"seeking correctly goes back when used repeatedly\" {","class":"lineCov","hits":"1","order":"296","possible_hits":"1",},
{"lineNum":"  301","line":"        const path = \"temp_reader_test_file3\";","class":"lineCov","hits":"1","order":"297","possible_hits":"1",},
{"lineNum":"  302","line":"        const msg = \"hola senorita\" ** 4096;","class":"lineCov","hits":"1","order":"298","possible_hits":"1",},
{"lineNum":"  303","line":"        var wrote_bytes: usize = 0;","class":"lineCov","hits":"1","order":"299","possible_hits":"1",},
{"lineNum":"  304","line":"        defer std.fs.cwd().deleteFile(path) catch {};","class":"linePartCov","hits":"1","order":"321","possible_hits":"25",},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        {"},
{"lineNum":"  307","line":"            const f = try std.fs.cwd().createFile(path, .{});","class":"linePartCov","hits":"2","order":"300","possible_hits":"4",},
{"lineNum":"  308","line":"            defer f.close();","class":"lineCov","hits":"1","order":"303","possible_hits":"1",},
{"lineNum":"  309","line":"            try f.writer().writeAll(msg);","class":"linePartCov","hits":"2","order":"301","possible_hits":"3",},
{"lineNum":"  310","line":"            wrote_bytes = msg.len;","class":"lineCov","hits":"1","order":"302","possible_hits":"1",},
{"lineNum":"  311","line":"        }"},
{"lineNum":"  312","line":"        var buf: [5]u8 = undefined;","class":"lineCov","hits":"1","order":"304","possible_hits":"1",},
{"lineNum":"  313","line":"        const correct_bytes: []const u8 = msg[wrote_bytes/2..wrote_bytes/2+5];","class":"linePartCov","hits":"2","order":"305","possible_hits":"3",},
{"lineNum":"  314","line":"        var buf_all: [msg.len]u8 = undefined;","class":"lineCov","hits":"1","order":"306","possible_hits":"1",},
{"lineNum":"  315","line":"        {"},
{"lineNum":"  316","line":"            const f = try std.fs.cwd().openFile(path, .{});","class":"linePartCov","hits":"2","order":"307","possible_hits":"4",},
{"lineNum":"  317","line":"            defer f.close();","class":"linePartCov","hits":"1","order":"320","possible_hits":"10",},
{"lineNum":"  318","line":"            var r = try ReadReader.init(&f);","class":"linePartCov","hits":"2","order":"308","possible_hits":"4",},
{"lineNum":"  319","line":"            const read_bytes = try r.read(&buf_all);","class":"linePartCov","hits":"2","order":"309","possible_hits":"4",},
{"lineNum":"  320","line":"            try r.seek_by(-@as(i64, @intCast(read_bytes/2)));","class":"linePartCov","hits":"1","order":"310","possible_hits":"3",},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"            try t.expectEqual(wrote_bytes, read_bytes);","class":"linePartCov","hits":"2","order":"311","possible_hits":"3",},
{"lineNum":"  323","line":"            try t.expectEqualStrings(msg, &buf_all);","class":"linePartCov","hits":"2","order":"312","possible_hits":"3",},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"            for (0..10000) |idx| {","class":"lineCov","hits":"3","order":"313","possible_hits":"3",},
{"lineNum":"  326","line":"                const read = try r.read(&buf);","class":"linePartCov","hits":"2","order":"314","possible_hits":"4",},
{"lineNum":"  327","line":"                try t.expectEqual(5, read);","class":"linePartCov","hits":"1","order":"315","possible_hits":"2",},
{"lineNum":"  328","line":"                log.debug(\"try count: {d}\", .{idx});","class":"lineCov","hits":"1","order":"316","possible_hits":"1",},
{"lineNum":"  329","line":"                try t.expectEqualStrings(&buf, correct_bytes);","class":"linePartCov","hits":"1","order":"317","possible_hits":"2",},
{"lineNum":"  330","line":"                try r.seek_by(-5);","class":"linePartCov","hits":"1","order":"318","possible_hits":"2",},
{"lineNum":"  331","line":"            }","class":"lineCov","hits":"3","order":"319","possible_hits":"3",},
{"lineNum":"  332","line":"        }"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"    }"},
{"lineNum":"  335","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2025-03-09 09:32:06", "instrumented" : 168, "covered" : 162,};
var merged_data = [];
