var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"    3","line":"const lib = @import(\"../lib.zig\");"},
{"lineNum":"    4","line":"const Reader = lib.Reader;"},
{"lineNum":"    5","line":"const log = std.log.scoped(.png);"},
{"lineNum":"    6","line":"const assert = std.debug.assert;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"pub const PNGRecoverer = struct {"},
{"lineNum":"    9","line":"    pub const PNG = struct {"},
{"lineNum":"   10","line":"        data: []u8,"},
{"lineNum":"   11","line":"        alloc: Allocator,"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"        pub fn init(alloc: Allocator, data: []u8) PNG {","class":"lineCov","hits":"2","order":"538","possible_hits":"2",},
{"lineNum":"   14","line":"            return PNG {","class":"lineCov","hits":"1","order":"539","possible_hits":"1",},
{"lineNum":"   15","line":"                .data = data,"},
{"lineNum":"   16","line":"                .alloc = alloc,"},
{"lineNum":"   17","line":"            };"},
{"lineNum":"   18","line":"        }"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"        pub fn deinit(self: PNG) void {","class":"lineCov","hits":"2","order":"545","possible_hits":"2",},
{"lineNum":"   21","line":"            self.alloc.free(self.data);","class":"lineCov","hits":"1","order":"546","possible_hits":"1",},
{"lineNum":"   22","line":"        }"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"        pub fn write_to_file(self: PNG, path: []const u8) !void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   25","line":"            const f = try std.fs.cwd().createFile(path, .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"            defer f.close();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   27","line":"            try f.writer().writeAll(self.data);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   28","line":"        }"},
{"lineNum":"   29","line":"    };"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    alloc: Allocator,"},
{"lineNum":"   32","line":"    reader: Reader,"},
{"lineNum":"   33","line":"    stride: usize = 512,"},
{"lineNum":"   34","line":"    max_size: usize = 20e6,"},
{"lineNum":"   35","line":"    debug: bool = false,"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    const Self = @This();"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"    pub fn init(alloc: Allocator, reader: Reader) Self {","class":"lineCov","hits":"1","order":"479","possible_hits":"1",},
{"lineNum":"   40","line":"        return Self {","class":"lineCov","hits":"1","order":"480","possible_hits":"1",},
{"lineNum":"   41","line":"            .alloc = alloc,"},
{"lineNum":"   42","line":"            .reader = reader,"},
{"lineNum":"   43","line":"        };"},
{"lineNum":"   44","line":"    }"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    pub fn deinit(self: Self) void {","class":"lineCov","hits":"2","order":"548","possible_hits":"2",},
{"lineNum":"   47","line":"        self.reader.deinit();","class":"lineCov","hits":"1","order":"549","possible_hits":"1",},
{"lineNum":"   48","line":"    }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    pub const START = [_]u8{ 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A };"},
{"lineNum":"   51","line":"    fn is_png_start(bytes: []const u8) bool {","class":"lineCov","hits":"2","order":"503","possible_hits":"2",},
{"lineNum":"   52","line":"        return std.mem.eql(u8, bytes, &START);","class":"lineCov","hits":"1","order":"504","possible_hits":"1",},
{"lineNum":"   53","line":"    }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    pub const END = \"IEND\";"},
{"lineNum":"   56","line":"    /// in reality END is \'IEND\' + 4 bytes of len"},
{"lineNum":"   57","line":"    pub const END_len = END.len + 4;"},
{"lineNum":"   58","line":"    fn is_png_end(bytes: []const u8) bool {","class":"lineCov","hits":"2","order":"511","possible_hits":"2",},
{"lineNum":"   59","line":"        return std.mem.eql(u8, bytes, END);","class":"lineCov","hits":"1","order":"512","possible_hits":"1",},
{"lineNum":"   60","line":"    }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    pub fn find_next(self: *Self) !?PNG {","class":"lineCov","hits":"2","order":"482","possible_hits":"2",},
{"lineNum":"   63","line":"        const buf = try self.alloc.alloc(u8, self.stride);","class":"lineCov","hits":"1","order":"483","possible_hits":"1",},
{"lineNum":"   64","line":"        defer self.alloc.free(buf);","class":"linePartCov","hits":"1","order":"540","possible_hits":"4",},
{"lineNum":"   65","line":"        var img_data = try self.alloc.alloc(u8, self.max_size);","class":"linePartCov","hits":"1","order":"484","possible_hits":"2",},
{"lineNum":"   66","line":"        errdefer self.alloc.free(img_data);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        var png_mem_copied: usize = 0;","class":"lineCov","hits":"1","order":"485","possible_hits":"1",},
{"lineNum":"   69","line":"        var png_started = false;","class":"lineCov","hits":"1","order":"486","possible_hits":"1",},
{"lineNum":"   70","line":"        var idx_png_start: usize = 0;","class":"lineCov","hits":"1","order":"487","possible_hits":"1",},
{"lineNum":"   71","line":"        var idx_png_end: usize = 0;","class":"lineCov","hits":"1","order":"488","possible_hits":"1",},
{"lineNum":"   72","line":"        var embedded_png_count: usize = 0;","class":"lineCov","hits":"1","order":"489","possible_hits":"1",},
{"lineNum":"   73","line":"        var png_ends_found: usize = 0;","class":"lineCov","hits":"1","order":"490","possible_hits":"1",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        var read_bytes = try self.reader.read(buf);","class":"lineCov","hits":"1","order":"491","possible_hits":"1",},
{"lineNum":"   76","line":"        var bytes_left: usize = 0;","class":"lineCov","hits":"1","order":"492","possible_hits":"1",},
{"lineNum":"   77","line":"        var bytes_left_buf: [2]u8 = undefined;","class":"lineCov","hits":"1","order":"493","possible_hits":"1",},
{"lineNum":"   78","line":"        while (read_bytes > 0) : ({","class":"lineCov","hits":"1","order":"494","possible_hits":"1",},
{"lineNum":"   79","line":"            read_bytes = try self.reader.read(buf);","class":"linePartCov","hits":"1","order":"524","possible_hits":"2",},
{"lineNum":"   80","line":"        }) {"},
{"lineNum":"   81","line":"            var idx: usize = 0;","class":"lineCov","hits":"1","order":"495","possible_hits":"1",},
{"lineNum":"   82","line":"            bytes_left = 0;","class":"lineCov","hits":"1","order":"496","possible_hits":"1",},
{"lineNum":"   83","line":"            while (idx < read_bytes) {","class":"lineCov","hits":"1","order":"497","possible_hits":"1",},
{"lineNum":"   84","line":"                bytes_left = read_bytes - idx;","class":"linePartCov","hits":"1","order":"498","possible_hits":"2",},
{"lineNum":"   85","line":"                // ensure that the next read won\'t possibly miss"},
{"lineNum":"   86","line":"                // a png start or png end"},
{"lineNum":"   87","line":"                if (png_started and bytes_left < END_len and read_bytes < self.stride and is_png_end(buf[idx..idx + END.len])) {","class":"lineCov","hits":"2","order":"499","possible_hits":"2",},
{"lineNum":"   88","line":"                    png_ends_found += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   89","line":"                    idx += END_len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"                    idx_png_end = idx;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"                    break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"                } else if (bytes_left < START.len and read_bytes > START.len) {","class":"lineCov","hits":"2","order":"500","possible_hits":"2",},
{"lineNum":"   93","line":"                    if (self.debug) log.debug(\"going back by {d} bytes, next bytes should be {x}\", .{bytes_left, buf[buf.len-bytes_left..]});","class":"linePartCov","hits":"1","order":"514","possible_hits":"2",},
{"lineNum":"   94","line":"                    try self.reader.seek_by(-@as(i64, @intCast(bytes_left)));","class":"linePartCov","hits":"1","order":"515","possible_hits":"2",},
{"lineNum":"   95","line":"                    break;","class":"lineCov","hits":"3","order":"501","possible_hits":"3",},
{"lineNum":"   96","line":"                }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"                if (!png_started and is_png_start(buf[idx..idx + START.len])) {","class":"lineCov","hits":"2","order":"502","possible_hits":"2",},
{"lineNum":"   99","line":"                    idx_png_start = idx;","class":"lineCov","hits":"1","order":"505","possible_hits":"1",},
{"lineNum":"  100","line":"                    idx += START.len;","class":"linePartCov","hits":"1","order":"506","possible_hits":"2",},
{"lineNum":"  101","line":"                    png_started = true;","class":"lineCov","hits":"1","order":"507","possible_hits":"1",},
{"lineNum":"  102","line":"                } else if (png_started and is_png_start(buf[idx..idx + START.len])) {","class":"lineCov","hits":"2","order":"509","possible_hits":"2",},
{"lineNum":"  103","line":"                    embedded_png_count += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":"                    if (self.debug) log.debug(\"embedded_png_count: {d}\", .{embedded_png_count});","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"                    idx += START.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  106","line":"                } else if (png_started and is_png_end(buf[idx..idx + END.len])) {","class":"lineCov","hits":"2","order":"510","possible_hits":"2",},
{"lineNum":"  107","line":"                    png_ends_found += 1;","class":"linePartCov","hits":"1","order":"525","possible_hits":"2",},
{"lineNum":"  108","line":"                    if (self.debug) log.debug(\"embedded_png_count: {d}, ends_found: {d}\", .{embedded_png_count, png_ends_found});","class":"linePartCov","hits":"1","order":"526","possible_hits":"2",},
{"lineNum":"  109","line":"                    idx += END_len;","class":"linePartCov","hits":"1","order":"527","possible_hits":"2",},
{"lineNum":"  110","line":"                    if (embedded_png_count < png_ends_found) {","class":"lineCov","hits":"1","order":"528","possible_hits":"1",},
{"lineNum":"  111","line":"                        idx_png_end = idx;","class":"lineCov","hits":"1","order":"529","possible_hits":"1",},
{"lineNum":"  112","line":"                        try self.reader.seek_by(-@as(i64, @intCast(read_bytes - idx_png_end)));","class":"linePartCov","hits":"1","order":"530","possible_hits":"2",},
{"lineNum":"  113","line":"                        break;","class":"linePartCov","hits":"1","order":"531","possible_hits":"3",},
{"lineNum":"  114","line":"                    }"},
{"lineNum":"  115","line":"                } else {"},
{"lineNum":"  116","line":"                    idx += 1;","class":"linePartCov","hits":"3","order":"513","possible_hits":"4",},
{"lineNum":"  117","line":"                }"},
{"lineNum":"  118","line":"            }","class":"linePartCov","hits":"2","order":"508","possible_hits":"3",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"            if (png_started and idx_png_end == 0) {","class":"lineCov","hits":"2","order":"516","possible_hits":"2",},
{"lineNum":"  121","line":"                const for_copy = buf[idx_png_start..buf.len - bytes_left];","class":"linePartCov","hits":"2","order":"517","possible_hits":"3",},
{"lineNum":"  122","line":"                @memcpy(img_data[png_mem_copied..png_mem_copied + for_copy.len], for_copy);","class":"linePartCov","hits":"2","order":"518","possible_hits":"3",},
{"lineNum":"  123","line":"                png_mem_copied += for_copy.len;","class":"linePartCov","hits":"1","order":"519","possible_hits":"2",},
{"lineNum":"  124","line":"                // has to be reset for it to copy correct bytes on the next read"},
{"lineNum":"  125","line":"                idx_png_start = 0;","class":"lineCov","hits":"1","order":"520","possible_hits":"1",},
{"lineNum":"  126","line":"                if (self.debug) {","class":"lineCov","hits":"1","order":"521","possible_hits":"1",},
{"lineNum":"  127","line":"                    @memcpy(&bytes_left_buf, buf[buf.len-bytes_left..]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  128","line":"                    log.debug(\"last copied bytes: {x}, left bytes: {x}\", .{img_data[png_mem_copied-bytes_left..png_mem_copied], buf[buf.len-bytes_left..]});","class":"linePartCov","hits":"2","order":"522","possible_hits":"4",},
{"lineNum":"  129","line":"                }"},
{"lineNum":"  130","line":"            } else if (png_started and idx_png_end != 0) {","class":"lineCov","hits":"2","order":"532","possible_hits":"2",},
{"lineNum":"  131","line":"                const for_copy = buf[idx_png_start..idx_png_end];","class":"lineCov","hits":"3","order":"533","possible_hits":"3",},
{"lineNum":"  132","line":"                @memcpy(img_data[png_mem_copied..png_mem_copied + for_copy.len], for_copy);","class":"linePartCov","hits":"2","order":"534","possible_hits":"3",},
{"lineNum":"  133","line":"                png_mem_copied += for_copy.len;","class":"linePartCov","hits":"1","order":"535","possible_hits":"2",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"                // free unused memory from the img_data buffer"},
{"lineNum":"  136","line":"                img_data = try self.alloc.realloc(img_data, png_mem_copied);","class":"linePartCov","hits":"1","order":"536","possible_hits":"2",},
{"lineNum":"  137","line":"                return PNG.init(self.alloc, img_data);","class":"lineCov","hits":"4","order":"537","possible_hits":"4",},
{"lineNum":"  138","line":"            }"},
{"lineNum":"  139","line":"        }","class":"lineCov","hits":"1","order":"523","possible_hits":"1",},
{"lineNum":"  140","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":"};"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"test {","class":"lineCov","hits":"1","order":"11","possible_hits":"1",},
{"lineNum":"  145","line":"    std.testing.refAllDecls(Tests);","class":"lineCov","hits":"1","order":"12","possible_hits":"1",},
{"lineNum":"  146","line":"}"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"const Tests = struct {"},
{"lineNum":"  149","line":"    const t = std.testing;"},
{"lineNum":"  150","line":"    const t_alloc = t.allocator;"},
{"lineNum":"  151","line":"    const FsHandler = lib.FilesystemHandler;"},
{"lineNum":"  152","line":"    const utils = @import(\"testing_utils.zig\");"},
{"lineNum":"  153","line":"    const proj_t_utils = @import(\"../testing_utils.zig\");"},
{"lineNum":"  154","line":"    const testing_fs_handler = utils.testing_fs_handler;"},
{"lineNum":"  155","line":"    const hash = utils.hash;"},
{"lineNum":"  156","line":"    const Hashes = utils.Hashes;"},
{"lineNum":"  157","line":"    const cleanup_hashes = utils.cleanup_hashes;"},
{"lineNum":"  158","line":"    const testing_original_data = utils.testing_original_data;"},
{"lineNum":"  159","line":"    const END = PNGRecoverer.END;"},
{"lineNum":"  160","line":"    const START = PNGRecoverer.START;"},
{"lineNum":"  161","line":"    const tlog = std.log.scoped(.png_tests);"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    const TestExample = enum {"},
{"lineNum":"  164","line":"        @\"input/pngs/example1.png\","},
{"lineNum":"  165","line":"        @\"input/pngs/example2.png\","},
{"lineNum":"  166","line":"        @\"input/pngs/example3.png\","},
{"lineNum":"  167","line":"        @\"input/pngs/example4.png\","},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        const paths = p: {"},
{"lineNum":"  170","line":"            const self_type_info = @typeInfo(TestExample).@\"enum\";"},
{"lineNum":"  171","line":"            const len = self_type_info.fields.len;"},
{"lineNum":"  172","line":"            var ps: [len][]const u8 = undefined;"},
{"lineNum":"  173","line":"            for (self_type_info.fields, 0..) |f, idx| {"},
{"lineNum":"  174","line":"                ps[idx] = f.name;"},
{"lineNum":"  175","line":"                // @compileLog(std.fmt.comptimePrint(\"field_name: {s}\\n\", .{f.name}));"},
{"lineNum":"  176","line":"            }"},
{"lineNum":"  177","line":"            break :p ps;"},
{"lineNum":"  178","line":"        };"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"        fn hashes() !Hashes {","class":"lineCov","hits":"1","order":"565","possible_hits":"1",},
{"lineNum":"  181","line":"            var hs = Hashes.init(t_alloc);","class":"lineCov","hits":"1","order":"566","possible_hits":"1",},
{"lineNum":"  182","line":"            for (paths) |p| {","class":"lineCov","hits":"3","order":"567","possible_hits":"3",},
{"lineNum":"  183","line":"                const data = try testing_original_data(p);","class":"linePartCov","hits":"1","order":"568","possible_hits":"2",},
{"lineNum":"  184","line":"                defer t_alloc.free(data);","class":"linePartCov","hits":"1","order":"571","possible_hits":"3",},
{"lineNum":"  185","line":"                const hash_ptr = try hash(data);","class":"linePartCov","hits":"1","order":"569","possible_hits":"2",},
{"lineNum":"  186","line":"                try hs.put(hash_ptr, {});","class":"linePartCov","hits":"1","order":"570","possible_hits":"2",},
{"lineNum":"  187","line":"            }","class":"lineCov","hits":"3","order":"572","possible_hits":"3",},
{"lineNum":"  188","line":"            return hs;","class":"lineCov","hits":"1","order":"573","possible_hits":"1",},
{"lineNum":"  189","line":"        }"},
{"lineNum":"  190","line":"    };"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"    test \"pngs read straight from the disk are interpreted via reader as the same imgs\" {","class":"lineCov","hits":"1","order":"467","possible_hits":"1",},
{"lineNum":"  193","line":"        try proj_t_utils.skip_slow_test();","class":"lineCov","hits":"1","order":"468","possible_hits":"1",},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"        inline for (TestExample.paths) |p| {","class":"lineCov","hits":"1","order":"469","possible_hits":"1",},
{"lineNum":"  196","line":"            tlog.debug(\"file: {s}\", .{p});","class":"lineCov","hits":"4","order":"470","possible_hits":"4",},
{"lineNum":"  197","line":"            var orig_mem_data: []u8 = undefined;","class":"lineCov","hits":"4","order":"471","possible_hits":"4",},
{"lineNum":"  198","line":"            defer t_alloc.free(orig_mem_data);","class":"linePartCov","hits":"4","order":"550","possible_hits":"28",},
{"lineNum":"  199","line":"            {"},
{"lineNum":"  200","line":"                const f = try std.fs.cwd().openFile(p, .{});","class":"linePartCov","hits":"4","order":"472","possible_hits":"12",},
{"lineNum":"  201","line":"                defer f.close();","class":"linePartCov","hits":"4","order":"475","possible_hits":"8",},
{"lineNum":"  202","line":"                orig_mem_data = try f.readToEndAlloc(t_alloc, 20e6);","class":"linePartCov","hits":"4","order":"473","possible_hits":"8",},
{"lineNum":"  203","line":"                tlog.debug(\"orig_mem_data_len: {d}\", .{orig_mem_data.len});","class":"lineCov","hits":"4","order":"474","possible_hits":"4",},
{"lineNum":"  204","line":"            }"},
{"lineNum":"  205","line":"            {"},
{"lineNum":"  206","line":"                const f = try std.fs.cwd().openFile(p, .{});","class":"linePartCov","hits":"4","order":"476","possible_hits":"12",},
{"lineNum":"  207","line":"                const reader = try Reader.init(&f);","class":"linePartCov","hits":"4","order":"477","possible_hits":"8",},
{"lineNum":"  208","line":"                var png_r = PNGRecoverer.init(t_alloc, reader);","class":"lineCov","hits":"4","order":"478","possible_hits":"4",},
{"lineNum":"  209","line":"                defer png_r.deinit();","class":"linePartCov","hits":"4","order":"547","possible_hits":"12",},
{"lineNum":"  210","line":"                var png = (try png_r.find_next()).?;","class":"linePartCov","hits":"8","order":"481","possible_hits":"12",},
{"lineNum":"  211","line":"                tlog.debug(\"recovered_data_len: {d}\", .{png.data.len});","class":"lineCov","hits":"4","order":"541","possible_hits":"4",},
{"lineNum":"  212","line":"                defer png.deinit();","class":"linePartCov","hits":"4","order":"544","possible_hits":"8",},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"                tlog.debug(\"a end: {s}, b end: {s}\", .{orig_mem_data[orig_mem_data.len-END.len..], png.data[png.data.len-END.len..]});","class":"linePartCov","hits":"8","order":"542","possible_hits":"12",},
{"lineNum":"  215","line":"                try t.expectEqualSlices(u8, orig_mem_data, png.data);","class":"linePartCov","hits":"4","order":"543","possible_hits":"8",},
{"lineNum":"  216","line":"            }"},
{"lineNum":"  217","line":"        }","class":"lineCov","hits":"8","order":"551","possible_hits":"8",},
{"lineNum":"  218","line":"    }"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    test \"recovered pngs have correct start and end bytes\" {","class":"lineCov","hits":"1","order":"552","possible_hits":"1",},
{"lineNum":"  221","line":"        try proj_t_utils.skip_slow_test();","class":"lineCov","hits":"1","order":"553","possible_hits":"1",},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"        var fs_handler = try testing_fs_handler();","class":"lineCov","hits":"1","order":"554","possible_hits":"1",},
{"lineNum":"  224","line":"        defer fs_handler.deinit();","class":"linePartCov","hits":"1","order":"561","possible_hits":"5",},
{"lineNum":"  225","line":"        const reader = try fs_handler.create_new_reader();","class":"linePartCov","hits":"1","order":"555","possible_hits":"2",},
{"lineNum":"  226","line":"        var png_r = PNGRecoverer.init(t_alloc, reader);","class":"lineCov","hits":"1","order":"556","possible_hits":"1",},
{"lineNum":"  227","line":"        const png = (try png_r.find_next()).?;","class":"linePartCov","hits":"2","order":"557","possible_hits":"3",},
{"lineNum":"  228","line":"        defer png.deinit();","class":"linePartCov","hits":"1","order":"560","possible_hits":"3",},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"        try t.expectEqualSlices(u8, png.data[0..START.len], &START);","class":"linePartCov","hits":"2","order":"558","possible_hits":"3",},
{"lineNum":"  231","line":"        try t.expectEqualSlices(u8, png.data[png.data.len-PNGRecoverer.END_len..png.data.len-4], PNGRecoverer.END);","class":"linePartCov","hits":"1","order":"559","possible_hits":"2",},
{"lineNum":"  232","line":"    }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"    test \"recover png from fat32, verify using sha1\" {","class":"lineCov","hits":"1","order":"562","possible_hits":"1",},
{"lineNum":"  235","line":"        try proj_t_utils.skip_slow_test();","class":"lineCov","hits":"1","order":"563","possible_hits":"1",},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"        var hashes = try TestExample.hashes();","class":"lineCov","hits":"1","order":"564","possible_hits":"1",},
{"lineNum":"  238","line":"        defer cleanup_hashes(&hashes);","class":"linePartCov","hits":"1","order":"587","possible_hits":"7",},
{"lineNum":"  239","line":"        var fs_handler = try testing_fs_handler();","class":"linePartCov","hits":"1","order":"574","possible_hits":"2",},
{"lineNum":"  240","line":"        defer fs_handler.deinit();","class":"linePartCov","hits":"1","order":"586","possible_hits":"6",},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"        const reader = try fs_handler.create_new_reader();","class":"linePartCov","hits":"1","order":"575","possible_hits":"2",},
{"lineNum":"  243","line":"        var png_r = PNGRecoverer.init(t_alloc, reader);","class":"lineCov","hits":"1","order":"576","possible_hits":"1",},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"        const output_paths = utils.calc_output_paths(TestExample.paths.len, TestExample.paths);","class":"lineCov","hits":"1","order":"577","possible_hits":"1",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"        for (output_paths) |op| {","class":"lineCov","hits":"3","order":"578","possible_hits":"3",},
{"lineNum":"  248","line":"            const png = (try png_r.find_next()).?;","class":"linePartCov","hits":"2","order":"579","possible_hits":"4",},
{"lineNum":"  249","line":"            defer png.deinit();","class":"linePartCov","hits":"1","order":"584","possible_hits":"4",},
{"lineNum":"  250","line":"            if (t.log_level == .debug) try png.write_to_file(op);","class":"linePartCov","hits":"1","order":"580","possible_hits":"3",},
{"lineNum":"  251","line":"            const h = try hash(png.data);","class":"linePartCov","hits":"1","order":"581","possible_hits":"3",},
{"lineNum":"  252","line":"            defer t_alloc.free(h);","class":"linePartCov","hits":"1","order":"583","possible_hits":"2",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"            t.expect(hashes.contains(h)) catch |err| {","class":"lineCov","hits":"2","order":"582","possible_hits":"2",},
{"lineNum":"  255","line":"                tlog.err(\"file {s} has incorrect hash: {x}\", .{op, h});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"                return err;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  257","line":"            };"},
{"lineNum":"  258","line":"        }","class":"lineCov","hits":"3","order":"585","possible_hits":"3",},
{"lineNum":"  259","line":"    }"},
{"lineNum":"  260","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2025-03-09 09:32:06", "instrumented" : 139, "covered" : 123,};
var merged_data = [];
