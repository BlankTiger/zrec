var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const lib = @import(\"../lib.zig\");"},
{"lineNum":"    3","line":"const Reader = lib.Reader;"},
{"lineNum":"    4","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"alloc: Allocator,"},
{"lineNum":"    7","line":"reader: Reader,"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"vbr: VBR,"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"const NTFS = @This();"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/// Volume Boot Record"},
{"lineNum":"   14","line":"const VBR = extern struct {"},
{"lineNum":"   15","line":"    jump_instruction:          [3]u8   align(1),"},
{"lineNum":"   16","line":"    oem_id:                    [8]u8   align(1),"},
{"lineNum":"   17","line":"    bytes_per_sector:          u16     align(1),"},
{"lineNum":"   18","line":"    sectors_per_cluster:       u8      align(1),"},
{"lineNum":"   19","line":"    reserved_sectors:          u16     align(1),"},
{"lineNum":"   20","line":"    always_zero1:              [3]u8   align(1),"},
{"lineNum":"   21","line":"    always_zero2:              u16     align(1),"},
{"lineNum":"   22","line":"    media_descriptor:          u8      align(1),"},
{"lineNum":"   23","line":"    always_zero3:              u16     align(1),"},
{"lineNum":"   24","line":"    sectors_per_track:         u16     align(1),"},
{"lineNum":"   25","line":"    number_of_heads:           u16     align(1),"},
{"lineNum":"   26","line":"    hidden_sectors:            u32     align(1),"},
{"lineNum":"   27","line":"    always_zero4:              u32     align(1),"},
{"lineNum":"   28","line":"    not_used1:                 u32     align(1),"},
{"lineNum":"   29","line":"    total_sectors:             u64     align(1),"},
{"lineNum":"   30","line":"    mft_lcn:                   u64     align(1),"},
{"lineNum":"   31","line":"    mftmirr_lcn:               u64     align(1),"},
{"lineNum":"   32","line":"    clusters_per_mft_record:   i8      align(1),"},
{"lineNum":"   33","line":"    not_used2:                 [3]u8   align(1),"},
{"lineNum":"   34","line":"    clusters_per_index_buffer: i8      align(1),"},
{"lineNum":"   35","line":"    not_used3:                 [3]u8   align(1),"},
{"lineNum":"   36","line":"    volume_serial_number:      u64     align(1),"},
{"lineNum":"   37","line":"    checksum:                  u32     align(1),"},
{"lineNum":"   38","line":"    boot_code:                 [426]u8 align(1),"},
{"lineNum":"   39","line":"    signature:                 u16     align(1),"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    const SIGNATURE = 0x55AA;"},
{"lineNum":"   42","line":"    const OEM_ID: [:0]const u8 = \"NTFS    \";"},
{"lineNum":"   43","line":"    const Self = @This();"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    pub fn init(reader: *Reader) !Self {","class":"lineCov","hits":"2","order":"142","possible_hits":"2",},
{"lineNum":"   46","line":"        var self = std.mem.zeroInit(Self, .{});","class":"lineCov","hits":"1","order":"143","possible_hits":"1",},
{"lineNum":"   47","line":"        const dst = std.mem.asBytes(&self);","class":"lineCov","hits":"1","order":"144","possible_hits":"1",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        try reader.seek_to(0);","class":"lineCov","hits":"1","order":"145","possible_hits":"1",},
{"lineNum":"   50","line":"        const bytes_read = try reader.read_struct_endian(VBR, &self, .little);","class":"lineCov","hits":"1","order":"148","possible_hits":"1",},
{"lineNum":"   51","line":"        if (bytes_read != dst.len) return error.ReadTooLittleForVBR;","class":"lineCov","hits":"2","order":"162","possible_hits":"2",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"        if (self.signature != SIGNATURE)            return error.NotNTFSWrongSignature;","class":"linePartCov","hits":"1","order":"1091","possible_hits":"2",},
{"lineNum":"   54","line":"        if (!std.mem.eql(u8, &self.oem_id, OEM_ID)) return error.NotNTFSBadOEM_ID;","class":"linePartCov","hits":"1","order":"1092","possible_hits":"2",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"        return self;","class":"lineCov","hits":"1","order":"1093","possible_hits":"1",},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":"};"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"pub const Error ="},
{"lineNum":"   61","line":"    Allocator.Error"},
{"lineNum":"   62","line":"    || std.fs.File.ReadError"},
{"lineNum":"   63","line":"    || error{"},
{"lineNum":"   64","line":"        NotNTFSWrongSignature,"},
{"lineNum":"   65","line":"        NotNTFSBadOEM_ID,"},
{"lineNum":"   66","line":"        InvalidJmpBoot,"},
{"lineNum":"   67","line":"        UnimplementedCurrently,"},
{"lineNum":"   68","line":"        ReadTooLittleForVBR"},
{"lineNum":"   69","line":"    };"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"pub fn estimate(alloc: Allocator, reader: *Reader) f32 {","class":"lineCov","hits":"2","order":"195","possible_hits":"2",},
{"lineNum":"   72","line":"    _ = alloc;"},
{"lineNum":"   73","line":"    _ = reader;"},
{"lineNum":"   74","line":"    return 0;","class":"lineCov","hits":"1","order":"196","possible_hits":"1",},
{"lineNum":"   75","line":"}"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"pub fn init(alloc: Allocator, reader: *Reader) Error!NTFS {","class":"lineCov","hits":"2","order":"139","possible_hits":"2",},
{"lineNum":"   78","line":"    return .{","class":"linePartCov","hits":"1","order":"140","possible_hits":"2",},
{"lineNum":"   79","line":"        .alloc = alloc,"},
{"lineNum":"   80","line":"        .reader = reader.*,"},
{"lineNum":"   81","line":"        .vbr = try .init(reader),","class":"lineCov","hits":"1","order":"141","possible_hits":"1",},
{"lineNum":"   82","line":"    };"},
{"lineNum":"   83","line":"}"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"pub fn deinit(self: *NTFS) void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":"    self.reader.deinit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"    self.* = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"}"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"pub fn get_size(self: NTFS) f64 {"},
{"lineNum":"   91","line":"    _ = self;"},
{"lineNum":"   92","line":"    unreachable;"},
{"lineNum":"   93","line":"}"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"pub fn get_free_size(self: NTFS) f64 {"},
{"lineNum":"   96","line":"    _ = self;"},
{"lineNum":"   97","line":"    unreachable;"},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"test {","class":"lineCov","hits":"1","order":"73","possible_hits":"1",},
{"lineNum":"  101","line":"    std.testing.refAllDecls(Tests);","class":"lineCov","hits":"1","order":"74","possible_hits":"1",},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"const Tests = struct {"},
{"lineNum":"  105","line":"    const t = std.testing;"},
{"lineNum":"  106","line":"    const PATH = \"./filesystems/ntfs_filesystem.img\";"},
{"lineNum":"  107","line":"    const t_utils = @import(\"testing_utils.zig\");"},
{"lineNum":"  108","line":"    const t_alloc = std.testing.allocator;"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    fn create_ntfs() !NTFS {"},
{"lineNum":"  111","line":"        const reader = try create_reader();"},
{"lineNum":"  112","line":"        return try .init(t_alloc, &reader);"},
{"lineNum":"  113","line":"    }"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"    fn create_reader() !Reader {","class":"lineCov","hits":"1","order":"1087","possible_hits":"1",},
{"lineNum":"  116","line":"        const f = try std.fs.cwd().openFile(PATH, .{});","class":"lineCov","hits":"1","order":"1088","possible_hits":"1",},
{"lineNum":"  117","line":"        return try Reader.init(&f);","class":"lineCov","hits":"1","order":"1089","possible_hits":"1",},
{"lineNum":"  118","line":"    }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    test \"parsing VBR\" {","class":"lineCov","hits":"1","order":"1085","possible_hits":"1",},
{"lineNum":"  121","line":"        var reader = try create_reader();","class":"lineCov","hits":"1","order":"1086","possible_hits":"1",},
{"lineNum":"  122","line":"        defer reader.deinit();","class":"linePartCov","hits":"1","order":"1095","possible_hits":"3",},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"        const vbr: VBR = try .init(&reader);","class":"linePartCov","hits":"1","order":"1090","possible_hits":"2",},
{"lineNum":"  125","line":"        try t.expectEqual(VBR.SIGNATURE, vbr.signature);","class":"linePartCov","hits":"2","order":"1094","possible_hits":"3",},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2025-03-09 09:32:06", "instrumented" : 27, "covered" : 24,};
var merged_data = [];
