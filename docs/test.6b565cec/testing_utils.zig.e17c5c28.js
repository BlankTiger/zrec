var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const lib = @import(\"../lib.zig\");"},
{"lineNum":"    3","line":"const FsHandler = lib.FilesystemHandler;"},
{"lineNum":"    4","line":"const testing = std.testing;"},
{"lineNum":"    5","line":"const t_alloc = testing.allocator;"},
{"lineNum":"    6","line":"const log = std.log.scoped(.filetypes_testing_utils);"},
{"lineNum":"    7","line":"const assert = std.debug.assert;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"pub fn testing_fs_handler() !FsHandler {","class":"lineCov","hits":"1","order":"413","possible_hits":"1",},
{"lineNum":"   10","line":"    const FAT32_PATH = \"./filesystems/fat32_filesystem.img\";","class":"lineCov","hits":"1","order":"414","possible_hits":"1",},
{"lineNum":"   11","line":"    return try FsHandler.init(t_alloc, FAT32_PATH);","class":"lineCov","hits":"1","order":"415","possible_hits":"1",},
{"lineNum":"   12","line":"}"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"pub fn testing_original_data(path: []const u8) ![]u8 {","class":"lineCov","hits":"2","order":"432","possible_hits":"2",},
{"lineNum":"   15","line":"    const original = try std.fs.cwd().openFile(path, .{});","class":"lineCov","hits":"1","order":"433","possible_hits":"1",},
{"lineNum":"   16","line":"    defer original.close();","class":"linePartCov","hits":"1","order":"435","possible_hits":"2",},
{"lineNum":"   17","line":"    const original_data = try original.readToEndAlloc(t_alloc, 10e6);","class":"linePartCov","hits":"1","order":"434","possible_hits":"2",},
{"lineNum":"   18","line":"    return original_data;","class":"lineCov","hits":"1","order":"436","possible_hits":"1",},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"pub const Sha1 = std.crypto.hash.Sha1;"},
{"lineNum":"   22","line":"pub const Hashes = std.StringHashMap(void);"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"pub fn hash(data: []u8) ![]u8 {","class":"lineCov","hits":"2","order":"438","possible_hits":"2",},
{"lineNum":"   25","line":"    const hash_ptr = try t_alloc.alloc(u8, Sha1.digest_length);","class":"lineCov","hits":"1","order":"439","possible_hits":"1",},
{"lineNum":"   26","line":"    Sha1.hash(data, hash_ptr[0..Sha1.digest_length], .{});","class":"lineCov","hits":"2","order":"440","possible_hits":"2",},
{"lineNum":"   27","line":"    log.debug(\"hash: {x}\", .{hash_ptr});","class":"lineCov","hits":"1","order":"441","possible_hits":"1",},
{"lineNum":"   28","line":"    return hash_ptr;","class":"lineCov","hits":"1","order":"442","possible_hits":"1",},
{"lineNum":"   29","line":"}"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"pub fn cleanup_hashes(h: *Hashes) void {","class":"lineCov","hits":"2","order":"463","possible_hits":"2",},
{"lineNum":"   32","line":"    var k_it = h.keyIterator();","class":"lineCov","hits":"1","order":"464","possible_hits":"1",},
{"lineNum":"   33","line":"    while (k_it.next()) |k| t_alloc.free(k.*);","class":"lineCov","hits":"1","order":"465","possible_hits":"1",},
{"lineNum":"   34","line":"    h.deinit();","class":"lineCov","hits":"1","order":"466","possible_hits":"1",},
{"lineNum":"   35","line":"}"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"pub fn calc_output_paths(comptime len: usize, comptime input_paths: [len][]const u8) [len][]const u8 {"},
{"lineNum":"   38","line":"    comptime var output_paths: [len][]const u8 = undefined;"},
{"lineNum":"   39","line":"    comptime {"},
{"lineNum":"   40","line":"        for (input_paths, 0..) |p, idx| {"},
{"lineNum":"   41","line":"            var path_part: []const u8 = undefined;"},
{"lineNum":"   42","line":"            var path_iter = std.mem.splitSequence(u8, p, \"/\");"},
{"lineNum":"   43","line":"            assert(path_iter.next() != null);"},
{"lineNum":"   44","line":"            path_part = path_iter.next().?;"},
{"lineNum":"   45","line":"            const path = \"output/\" ++ path_part;"},
{"lineNum":"   46","line":"            output_paths[idx] = path;"},
{"lineNum":"   47","line":"        }"},
{"lineNum":"   48","line":"    }"},
{"lineNum":"   49","line":"    return output_paths;","class":"lineCov","hits":"2","order":"452","possible_hits":"2",},
{"lineNum":"   50","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2025-03-09 09:32:06", "instrumented" : 18, "covered" : 18,};
var merged_data = [];
